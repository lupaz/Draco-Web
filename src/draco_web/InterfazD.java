/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package draco_web;

import AST.DibujarAST;
import Dasm.Par_Dasm;
import Dasm.Scan_Dasm;
import Dibujo.Dibujo;
import Dplusplus.Par_Dplus;
import Dplusplus.Scan_Dplus;
import DracoScript.Par_DS;
import DracoScript.Scan_DS;
import EjecucionDASM.InterpreteDas;
import EjecucionDS.InterpreteDS;
import TraductorDpp.Generador;
import TraductorDpp.Traductor;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GraphicsConfiguration;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import javax.swing.text.Document;
/**
 *
 * @author Luis
 */
public class InterfazD extends javax.swing.JFrame{
    
    int indice=1;
    public static ArrayList<String> listaErrores = new  ArrayList<>();
    public static String rutaGenesis="C:\\Users\\Luis\\Desktop\\AST2\\";
    DefaultHighlightPainter redPainter = new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.decode("#FF5F60"));
    DefaultHighlightPainter greenPainter = new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.decode("#7CBC67"));
    DefaultHighlightPainter normalPainter = new DefaultHighlighter.DefaultHighlightPainter(java.awt.Color.decode("#FFFFFF"));
    Traductor traduc;
    boolean dpp=false;
    boolean dsm=false;
    boolean djs = false;
    InterpreteDas inter;
    InterpreteDS interD;
    Dibujo dibujo;
    int lineatmp=-1;
    static  GraphicsConfiguration gc;
    /**
     * Creates new form InterfazD
     */
    
    public InterfazD() {
        initComponents();
        LineasText tmpL = new LineasText();
        this.dibujo = new Dibujo();
        posicionPuntero(tmpL);
        tmpL.text_pane.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    //int linea = tmpL.care
                    int linea = Integer.parseInt(noLinea.getText());
                    try {
                        String text=tmpL.doc.getText(0,tmpL.doc.getLength());
                        int start=0;
                        int end=0;
                        int line=0;
                        boolean even = true;
                        while ((end = text.indexOf('\n', start)) >= 0) {
                            line++;
                            if(line==linea){
                                if(tmpL.exiteLine(linea)){
                                    Object tmp =tmpL.hilite.addHighlight(start, end+1,normalPainter);
                                    tmpL.hilite.removeHighlight(tmpL.quitarline(linea));
                                    tmpL.hilite.removeHighlight(tmp);
                                    break;
                                }else{
                                    tmpL.reflines.add(tmpL.hilite.addHighlight(start, end+1,redPainter));
                                    tmpL.lineasdeb.add((linea));
                                    break;
                                }                                
                            }                            
                            start = end+1;
                        }
                    } catch (BadLocationException ex) {
                        System.out.println(ex.getMessage());
                    }                    
                    System.out.println("Se ha hecho doble click en la linea -> "+linea);
                }
            }
        });
        JPanel tmpP = new JPanel(new BorderLayout());
        tmpP.add(tmpL, BorderLayout.WEST);
        tmpP.add(tmpL.scrollPane, BorderLayout.CENTER);
        tmpP.setPreferredSize(new Dimension(1,1));
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setViewportView(tmpP);
        tabs.addTab("Nuevo",scrollPane);
        salidas.setSelectedIndex(2);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbol = new javax.swing.JTree();
        salidas = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        dasm = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        errores = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaS = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        tStack = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tHeap = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tPila = new javax.swing.JTable();
        tabs = new javax.swing.JTabbedPane();
        busqueda = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        debug = new javax.swing.JButton();
        continuar = new javax.swing.JButton();
        siguiente = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        noLinea = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        noColumna = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        nuevo_dpp = new javax.swing.JMenuItem();
        nuevo_ds = new javax.swing.JMenuItem();
        nuevoDasm = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        cargar = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        compila = new javax.swing.JMenuItem();
        actualiza = new javax.swing.JMenuItem();
        quitarpest = new javax.swing.JMenuItem();
        verDibujo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(arbol);

        jTabbedPane1.addTab("Directorio", jScrollPane1);

        salidas.setBackground(new java.awt.Color(102, 102, 102));
        salidas.setForeground(new java.awt.Color(255, 255, 255));

        dasm.setBackground(new java.awt.Color(153, 153, 153));
        dasm.setColumns(20);
        dasm.setRows(5);
        jScrollPane2.setViewportView(dasm);

        salidas.addTab("DASM", jScrollPane2);

        errores.setBackground(new java.awt.Color(102, 102, 102));
        errores.setColumns(20);
        errores.setForeground(new java.awt.Color(255, 255, 255));
        errores.setLineWrap(true);
        errores.setRows(5);
        jScrollPane3.setViewportView(errores);

        salidas.addTab("ERRORES", jScrollPane3);

        consola.setBackground(new java.awt.Color(102, 102, 102));
        consola.setColumns(20);
        consola.setForeground(new java.awt.Color(255, 255, 255));
        consola.setRows(5);
        jScrollPane4.setViewportView(consola);

        salidas.addTab("CONSOLA", jScrollPane4);

        tablaS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tablaS);

        salidas.addTab("TABLA SIMBOLOS", jScrollPane5);

        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        tStack.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(tStack);

        jTabbedPane2.addTab("STACK", jScrollPane6);

        tHeap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(tHeap);

        jTabbedPane2.addTab("HEAP", jScrollPane7);

        tPila.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(tPila);

        jTabbedPane2.addTab("PILA AUX", jScrollPane8);

        salidas.addTab("ESTRUCTURAS", jTabbedPane2);

        tabs.setAutoscrolls(true);

        busqueda.setText("Busqueda");
        busqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busquedaActionPerformed(evt);
            }
        });

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        debug.setBackground(new java.awt.Color(255, 153, 0));
        debug.setText("Debugear");
        debug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugActionPerformed(evt);
            }
        });

        continuar.setBackground(new java.awt.Color(51, 153, 0));
        continuar.setText("Continuar");
        continuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuarActionPerformed(evt);
            }
        });

        siguiente.setBackground(new java.awt.Color(255, 204, 51));
        siguiente.setText("Siguiente");
        siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 51, 51));
        jButton6.setText("Detener");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel1.setText("Linea:");

        noLinea.setText("0");

        jLabel3.setText("Columna:");

        noColumna.setText("0");

        Archivo.setText("Archivo");

        nuevo_dpp.setText("Nuevo D++");
        nuevo_dpp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevo_dppActionPerformed(evt);
            }
        });
        Archivo.add(nuevo_dpp);

        nuevo_ds.setText("Nuevo Ds");
        Archivo.add(nuevo_ds);

        nuevoDasm.setText("Nuevo DASM");
        nuevoDasm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoDasmActionPerformed(evt);
            }
        });
        Archivo.add(nuevoDasm);

        guardar.setText("Guardar Dasm");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        Archivo.add(guardar);

        cargar.setText("Cargar Archivo");
        cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarActionPerformed(evt);
            }
        });
        Archivo.add(cargar);

        jMenuBar1.add(Archivo);

        jMenu2.setText("Herramientas");

        compila.setText("Compilar");
        compila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compilaActionPerformed(evt);
            }
        });
        jMenu2.add(compila);

        actualiza.setText("Actualizar");
        actualiza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizaActionPerformed(evt);
            }
        });
        jMenu2.add(actualiza);

        quitarpest.setText("Eliminar Pestaña");
        quitarpest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitarpestActionPerformed(evt);
            }
        });
        jMenu2.add(quitarpest);

        verDibujo.setText("Ver Dibujo");
        verDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verDibujoActionPerformed(evt);
            }
        });
        jMenu2.add(verDibujo);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(salidas)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(262, 262, 262)
                                .addComponent(debug, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(continuar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(siguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                                .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buscar))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tabs)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noLinea)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noColumna)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(debug, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buscar)
                        .addComponent(siguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(continuar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tabs)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(noLinea)
                    .addComponent(jLabel3)
                    .addComponent(noColumna))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(salidas, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Directorios");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar Archivo");   
        int userSelection = fileChooser.showSaveDialog(this);
        
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            int tab=tabs.getSelectedIndex();         
            String titulo=tabs.getTitleAt(tab);
            JScrollPane scroll =(JScrollPane)tabs.getComponentAt(tab);
            JPanel  tmpP = (JPanel)scroll.getViewport().getView();
            LineasText tmpL = (LineasText)tmpP.getComponent(0);
            if(titulo.contains("traduccion")){
                escribirArchivo(fileToSave.getAbsolutePath(),tmpL.text_pane.getText());
                notificar("AVISO: Archivo DASM guardado Correctamente. :D\n");
            }  
        }
 
    }//GEN-LAST:event_guardarActionPerformed

    private void actualizaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizaActionPerformed
       lineatmp=-1;
        int index = tabs.getSelectedIndex();        
        String title = tabs.getTitleAt(index); 
        if(title.contains(".dasm")){
            JScrollPane scroll =(JScrollPane)tabs.getComponentAt(index);
            JPanel  tmpP = (JPanel)scroll.getViewport().getView();
            LineasText tmpL = (LineasText)tmpP.getComponent(0);
            tmpL.text_pane.setText(Traductor.codigo_generado);  
        }else{ //actualizo el arbol
        
        } 
    }//GEN-LAST:event_actualizaActionPerformed

    private void cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarActionPerformed
        JFileChooser filechoos = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("D++", "dpp");
        FileNameExtensionFilter filter2 = new FileNameExtensionFilter("Djs", "djs");
        FileNameExtensionFilter filter3 = new FileNameExtensionFilter("Dasm", "dasm");
        filechoos.setFileFilter(filter3);
        filechoos.setFileFilter(filter2);
        filechoos.setFileFilter(filter);        
        int opcion = filechoos.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            String nombre = filechoos.getSelectedFile().getName();
            String ruta = filechoos.getSelectedFile().getPath();
            rutaGenesis=ruta.replace(nombre,"");
            String texto = leerArchivo(ruta);
            System.out.println("La ruta genesis es: "+rutaGenesis);
            LineasText tmpL = new LineasText();
            posicionPuntero(tmpL);
            tmpL.text_pane.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        //int linea = tmpL.care
                        int linea = Integer.parseInt(noLinea.getText());
                        try {
                            String text = tmpL.doc.getText(0, tmpL.doc.getLength());
                            int start = 0;
                            int end = 0;
                            int line = 0;
                            boolean even = true;
                            while ((end = text.indexOf('\n', start)) >= 0) {
                                line++;
                                if (line == linea) {
                                    if (tmpL.exiteLine(linea)) {
                                        Object tmp = tmpL.hilite.addHighlight(start, end + 1, normalPainter);
                                        tmpL.hilite.removeHighlight(tmpL.quitarline(linea));
                                        tmpL.hilite.removeHighlight(tmp);
                                        break;
                                    } else {
                                        tmpL.reflines.add(tmpL.hilite.addHighlight(start, end + 1, redPainter));
                                        tmpL.lineasdeb.add(linea);
                                        break;
                                    }
                                }
                                start = end + 1;
                            }
                        } catch (BadLocationException ex) {
                            System.out.println(ex.getMessage());
                        }
                        System.out.println("Se ha hecho doble click en la linea -> " + linea);
                    }
                }
            });
            tmpL.text_pane.setText(texto);
            JPanel tmpP = new JPanel(new BorderLayout());
            tmpP.add(tmpL, BorderLayout.WEST);
            tmpP.add(tmpL.scrollPane, BorderLayout.CENTER);
            tmpP.setPreferredSize(new Dimension(1, 1));
            JScrollPane scrollPane = new JScrollPane();
            scrollPane.setViewportView(tmpP);
            tabs.addTab(nombre, scrollPane);
            tabs.setSelectedIndex(tabs.getTabCount()-1);
        }
        
    }//GEN-LAST:event_cargarActionPerformed

    private void nuevo_dppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevo_dppActionPerformed
        LineasText tmpL = new LineasText();
        posicionPuntero(tmpL);
        //<editor-fold desc="evento debuger">
        tmpL.text_pane.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    //int linea = tmpL.care
                    int linea = Integer.parseInt(noLinea.getText());
                    try {
                        String text=tmpL.doc.getText(0,tmpL.doc.getLength());
                        int start=0;
                        int end=0;
                        int line=0;
                        boolean even = true;
                        while ((end = text.indexOf('\n', start)) >= 0) {
                            line++;
                            if(line==linea){
                                if(tmpL.exiteLine(linea)){
                                    Object tmp =tmpL.hilite.addHighlight(start, end+1,normalPainter);
                                    tmpL.hilite.removeHighlight(tmpL.quitarline(linea));
                                    tmpL.hilite.removeHighlight(tmp);
                                    break;
                                }else{
                                    tmpL.reflines.add(tmpL.hilite.addHighlight(start, end+1,redPainter));
                                    tmpL.lineasdeb.add(linea);
                                    break;
                                }                                
                            }                            
                            start = end+1;
                        }
                    } catch (BadLocationException ex) {
                        System.out.println(ex.getMessage());
                    }                    
                    System.out.println("Se ha hecho doble click en la linea -> "+linea);
                }
            }
        });
        //</editor-fold>
        JPanel tmpP = new JPanel(new BorderLayout());
        tmpP.add(tmpL, BorderLayout.WEST);
        tmpP.add(tmpL.scrollPane, BorderLayout.CENTER);
        tmpP.setPreferredSize(new Dimension(1,1));
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setViewportView(tmpP);
        tabs.addTab("Nuevo_"+(indice++)+".dpp",scrollPane);
        tabs.setSelectedIndex(tabs.getTabCount()-1);
    }//GEN-LAST:event_nuevo_dppActionPerformed

    private void quitarpestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitarpestActionPerformed
        int actual= tabs.getSelectedIndex();
        int resp = JOptionPane.showConfirmDialog( this, "¿Desea cerrar la pestaña actual?", "Cerrar Pestaña",JOptionPane.YES_NO_OPTION);
        System.out.println(resp);
        if(resp==0){
            tabs.removeTabAt(actual);
            notificar("Se elimino la pestaña");
        }
    }//GEN-LAST:event_quitarpestActionPerformed

    private void debugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugActionPerformed
        lineatmp=-1;
        inter=null;
        traduc=null;
        int index = tabs.getSelectedIndex();        
        String title = tabs.getTitleAt(index); 
        if(title.contains(".dpp")){            
            Generador.reset();
            Traductor.reset();
            try {
                JScrollPane scroll =(JScrollPane)tabs.getComponentAt(index);
                JPanel  tmpP = (JPanel)scroll.getViewport().getView();
                LineasText tmpL = (LineasText)tmpP.getComponent(0);
                Scan_Dplus scanner = new Scan_Dplus(new BufferedReader(new StringReader(tmpL.text_pane.getText())));
                scanner.pintar= new Pintar(tmpL.sc, tmpL.doc);
                scanner.nomArch=title;
                Par_Dplus parser = new Par_Dplus(scanner);
                parser.nombreArch=title;
                parser.parse();
                if(notificarErrrores()){
                    notificar("AVISO : Existen errores Lexicos/Sintacticos, ver consola de errores.");
                    listaErrores.clear();
                }
                DibujarAST dibuja = new  DibujarAST();
                dibuja.generarImg(parser.raiz,"draco");
                //vamos a comenzar la trduccion.
                dpp=true;
                dsm=false;
                djs=false;
                traduc = new Traductor(parser.raiz, tmpL.lineasdeb,title);
                traduc.setConsolas(errores, consola, dasm, tablaS,tmpL);
                traduc.start();
                LineasText tmpL2 = new LineasText();
                posicionPuntero(tmpL2);
                //<editor-fold desc="evento debuger">
                tmpL2.text_pane.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2) {
                            //int linea = tmpL.care
                            int linea = Integer.parseInt(noLinea.getText());
                            try {
                                String text = tmpL2.doc.getText(0, tmpL2.doc.getLength());
                                int start = 0;
                                int end = 0;
                                int line = 0;
                                boolean even = true;
                                while ((end = text.indexOf('\n', start)) >= 0) {
                                    line++;
                                    if (line == linea) {
                                        if (tmpL2.exiteLine(linea)) {
                                            Object tmp = tmpL2.hilite.addHighlight(start, end + 1, normalPainter);
                                            tmpL2.hilite.removeHighlight(tmpL2.quitarline(linea));
                                            tmpL2.hilite.removeHighlight(tmp);
                                            break;
                                        } else {
                                            tmpL2.reflines.add(tmpL2.hilite.addHighlight(start, end + 1, redPainter));
                                            tmpL2.lineasdeb.add(linea);
                                            break;
                                        }
                                    }
                                    start = end + 1;
                                }
                            } catch (BadLocationException ex) {
                                System.out.println(ex.getMessage());
                            }
                            System.out.println("Se ha hecho doble click en la linea -> " + linea);
                        }
                    }
                });
                //</editor-fold>
                JPanel tmpP2 = new JPanel(new BorderLayout());
                tmpP2.add(tmpL2, BorderLayout.WEST);
                tmpP2.add(tmpL2.scrollPane, BorderLayout.CENTER);
                tmpP2.setPreferredSize(new Dimension(1,1));
                JScrollPane scrollPane = new JScrollPane();
                scrollPane.setViewportView(tmpP2);
                tabs.addTab("traduccion.dasm",scrollPane);
                tabs.setSelectedIndex(tabs.getTabCount()-1);
                tmpL2.text_pane.setText(Traductor.codigo_generado);
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }            
        }else if(title.contains(".ds")){
            //aca ira el analisis de dracoscript
            try {
                JScrollPane scroll =(JScrollPane)tabs.getComponentAt(index);
                JPanel  tmpP = (JPanel)scroll.getViewport().getView();
                LineasText tmpL = (LineasText)tmpP.getComponent(0);
                Scan_Dplus scanner = new Scan_Dplus(new BufferedReader(new StringReader(tmpL.text_pane.getText())));
                scanner.pintar= new Pintar(tmpL.sc, tmpL.doc);
                scanner.nomArch=title;
                Par_Dplus parser = new Par_Dplus(scanner);
                parser.nombreArch=title;
                parser.parse();
                if(notificarErrrores()){
                    notificar("AVISO : Existen errores Lexicos/Sintacticos, ver consola de errores.");
                    listaErrores.clear();
                }
                DibujarAST dibuja = new  DibujarAST();
                dibuja.generarImg(parser.raiz,"draco");
                //vamos a comenzar la trduccion.
                dpp=false;
                dsm=false;
                djs =true;
                interD = new InterpreteDS(parser.raiz, tmpL.lineasdeb,title);
                interD.iniciar_Coponentes(consola, tmpL, dibujo, tabs, noLinea, noColumna);
                interD.start();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }else if(title.contains(".dasm")){            
            try {
                JScrollPane scroll =(JScrollPane)tabs.getComponentAt(index);
                JPanel  tmpP = (JPanel)scroll.getViewport().getView();
                LineasText tmpL = (LineasText)tmpP.getComponent(0);
                Scan_Dasm scanner = new Scan_Dasm(new BufferedReader(new StringReader(tmpL.text_pane.getText())));
                scanner.nomArch=title;
                Par_Dasm parser = new Par_Dasm(scanner);
                parser.nombreArch=title;
                parser.parse();
                if(notificarErrrores()){
                    notificar("AVISO : Existen errores Lexicos/Sintacticos, ver consola de errores.");
                    listaErrores.clear();
                }
                DibujarAST dibuja = new  DibujarAST();
                dibuja.generarImg(parser.raiz,"dasm");               
                //iniciamos la ejecucion de Dasm
                dsm=true;
                dpp=false;
                djs=false;
                inter = new InterpreteDas(parser.raiz, tmpL.lineasdeb,title);
                inter.iniComponentes(tStack, tHeap, tPila, consola,tmpL,dibujo);
                inter.start();                
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }else{
            System.out.println("No se reconocio una extension de fichero valida");
            notificar("No se reconocio una extension de fichero valida");
        } 
        
    }//GEN-LAST:event_debugActionPerformed

    private void compilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compilaActionPerformed
        inter=null;
        traduc=null;
        interD=null;
        int index = tabs.getSelectedIndex();        
        String title = tabs.getTitleAt(index); 
        if(title.contains(".dpp")){
            Generador.reset();
            Traductor.reset();
            try {
                JScrollPane scroll =(JScrollPane)tabs.getComponentAt(index);
                JPanel  tmpP = (JPanel)scroll.getViewport().getView();
                LineasText tmpL = (LineasText)tmpP.getComponent(0);
                Scan_Dplus scanner = new Scan_Dplus(new BufferedReader(new StringReader(tmpL.text_pane.getText())));
                scanner.pintar= new Pintar(tmpL.sc, tmpL.doc);
                scanner.nomArch=title;
                Par_Dplus parser = new Par_Dplus(scanner);
                parser.nombreArch=title;
                parser.parse();
                if(notificarErrrores()){
                    notificar("AVISO : Existen errores Lexicos/Sintacticos, ver consola de errores.");
                    listaErrores.clear();
                }
                DibujarAST dibuja = new  DibujarAST();
                dibuja.generarImg(parser.raiz,"draco");
                traduc = new Traductor(parser.raiz, title);
                traduc.setConsolas(errores, consola, dasm, tablaS,tmpL);
                traduc.start();
                LineasText tmpL2 = new LineasText();
                posicionPuntero(tmpL2);
                //<editor-fold desc="evento debuger">
                tmpL2.text_pane.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2) {
                            //int linea = tmpL.care
                            int linea = Integer.parseInt(noLinea.getText());
                            try {
                                String text = tmpL2.doc.getText(0, tmpL2.doc.getLength());
                                int start = 0;
                                int end = 0;
                                int line = 0;
                                boolean even = true;
                                while ((end = text.indexOf('\n', start)) >= 0) {
                                    line++;
                                    if (line == linea) {
                                        if (tmpL2.exiteLine(linea)) {
                                            Object tmp = tmpL2.hilite.addHighlight(start, end + 1, normalPainter);
                                            tmpL2.hilite.removeHighlight(tmpL2.quitarline(linea));
                                            tmpL2.hilite.removeHighlight(tmp);
                                            break;
                                        } else {
                                            tmpL2.reflines.add(tmpL2.hilite.addHighlight(start, end + 1, redPainter));
                                            tmpL2.lineasdeb.add(linea);
                                            break;
                                        }
                                    }
                                    start = end + 1;
                                }
                            } catch (BadLocationException ex) {
                                System.out.println(ex.getMessage());
                            }
                            System.out.println("Se ha hecho doble click en la linea -> " + linea);
                        }
                    }
                });
                //</editor-fold>
                JPanel tmpP2 = new JPanel(new BorderLayout());
                tmpP2.add(tmpL2, BorderLayout.WEST);
                tmpP2.add(tmpL2.scrollPane, BorderLayout.CENTER);
                tmpP2.setPreferredSize(new Dimension(1,1));
                JScrollPane scrollPane = new JScrollPane();
                scrollPane.setViewportView(tmpP2);
                tabs.addTab("traduccion.dasm",scrollPane);
                tabs.setSelectedIndex(tabs.getTabCount()-1);
                tmpL2.text_pane.setText(Traductor.codigo_generado);                
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }            
        }else if(title.contains(".djs")){
            //aca ira el analisis de dracoscript
            try {
                JScrollPane scroll =(JScrollPane)tabs.getComponentAt(index);
                JPanel  tmpP = (JPanel)scroll.getViewport().getView();
                LineasText tmpL = (LineasText)tmpP.getComponent(0);
                Scan_DS scanner = new Scan_DS(new BufferedReader(new StringReader(tmpL.text_pane.getText())));
                scanner.pintar= new Pintar(tmpL.sc, tmpL.doc);
                scanner.nomArch=title;
                Par_DS parser = new Par_DS(scanner);
                parser.nombreArch=title;
                parser.parse();
                if(notificarErrrores()){
                    notificar("AVISO : Existen errores Lexicos/Sintacticos, ver consola de errores.");
                    listaErrores.clear();
                }
                DibujarAST dibuja = new  DibujarAST();
                dibuja.generarImg(parser.raiz,"draS");
                interD = new InterpreteDS(parser.raiz, title);
                interD.iniciar_Coponentes(consola, tmpL,dibujo,tabs,noLinea,noColumna);
                interD.start();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
            //alto nivel 
        }else if(title.contains(".dasm")){
             try {
                JScrollPane scroll =(JScrollPane)tabs.getComponentAt(index);
                JPanel  tmpP = (JPanel)scroll.getViewport().getView();
                LineasText tmpL = (LineasText)tmpP.getComponent(0);
                Scan_Dasm scanner = new Scan_Dasm(new BufferedReader(new StringReader(tmpL.text_pane.getText())));
                scanner.nomArch=title;
                Par_Dasm parser = new Par_Dasm(scanner);
                parser.nombreArch=title;
                parser.parse();                
                if(notificarErrrores()){
                    notificar("AVISO : Existen errores Lexicos/Sintacticos, ver consola de errores.");
                    listaErrores.clear();
                }
                DibujarAST dibuja = new  DibujarAST();
                dibuja.generarImg(parser.raiz,"dasm");
                inter = new InterpreteDas(parser.raiz, title);
                inter.iniComponentes(tStack, tHeap, tPila, consola, tmpL, dibujo);
                inter.start();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            } 
        }else{
            System.out.println("No se reconocio una extension de fichero valida");
            notificar("No se reconocio una extension de fichero valida");
        }        
        System.out.println("Si lo hizo :D");        
    }//GEN-LAST:event_compilaActionPerformed

    private void continuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuarActionPerformed
        int index = tabs.getSelectedIndex();
        JScrollPane scroll =(JScrollPane)tabs.getComponentAt(index);
        JPanel  tmpP = (JPanel)scroll.getViewport().getView();
        LineasText tmpL = (LineasText)tmpP.getComponent(0);
        if(dpp){
            if (traduc != null) {
                traduc.continuar();
            }
        }else if(dsm){
            if (inter != null) {                                                
                inter.continuar();                
            }
        }
        
    }//GEN-LAST:event_continuarActionPerformed

    private void siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteActionPerformed
        if(dpp){
            if (traduc != null) {
                traduc.siguientePunto();
            }
        }else if(dsm){
            if (inter != null) {
                inter.siguientePunto();
            }
        }
    }//GEN-LAST:event_siguienteActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(dpp){
            if (traduc != null) {
                traduc.detener();
            }
        }else if(dsm){
            if (inter != null) {
                inter.detener();
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void nuevoDasmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoDasmActionPerformed
        LineasText tmpL = new LineasText();
        posicionPuntero(tmpL);
        tmpL.text_pane.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    //int linea = tmpL.care
                    int linea = Integer.parseInt(noLinea.getText());
                    try {
                        String text=tmpL.doc.getText(0,tmpL.doc.getLength());
                        int start=0;
                        int end=0;
                        int line=0;
                        boolean even = true;
                        while ((end = text.indexOf('\n', start)) >= 0) {
                            line++;
                            if(line==linea){
                                if(tmpL.exiteLine(linea)){
                                    Object tmp =tmpL.hilite.addHighlight(start, end+1,normalPainter);
                                    tmpL.hilite.removeHighlight(tmpL.quitarline(linea));
                                    tmpL.hilite.removeHighlight(tmp);
                                    break;
                                }else{
                                    tmpL.reflines.add(tmpL.hilite.addHighlight(start, end+1,redPainter));
                                    tmpL.lineasdeb.add(linea);
                                    break;
                                }                                
                            }                            
                            start = end+1;
                        }
                    } catch (BadLocationException ex) {
                        System.out.println(ex.getMessage());
                    }                    
                    System.out.println("Se ha hecho doble click en la linea -> "+linea);
                }
            }
        });
        JPanel tmpP = new JPanel(new BorderLayout());
        tmpP.add(tmpL, BorderLayout.WEST);
        tmpP.add(tmpL.scrollPane, BorderLayout.CENTER);
        tmpP.setPreferredSize(new Dimension(1,1));
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setViewportView(tmpP);
        tabs.addTab("Nuevo_"+(indice++)+".dasm",scrollPane);
        tabs.setSelectedIndex(tabs.getTabCount()-1);
    }//GEN-LAST:event_nuevoDasmActionPerformed

    private void verDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verDibujoActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame();
        frame.setTitle("Welcome to the jungle XD");
        frame.setSize(600, 600);
        frame.setLocation(200, 200);
        frame.add(dibujo);        
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setResizable(false);        
    }//GEN-LAST:event_verDibujoActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
            // TODO add your handling code here:
        int tab = tabs.getSelectedIndex();
        String titulo = tabs.getTitleAt(tab);
        JScrollPane scroll = (JScrollPane) tabs.getComponentAt(tab);
        JPanel tmpP = (JPanel) scroll.getViewport().getView();
        LineasText tmpL = (LineasText) tmpP.getComponent(0);        
        try {
            Document doc = tmpL.text_pane.getDocument();
            String text = tmpL.text_pane.getText(0, doc.getLength());
            int pos = tmpL.text_pane.getCaretPosition();
            boolean found = false;
            int findLength = busqueda.getText().length();
            // Rest the search position if we're at the end of the document
            if (pos + findLength > doc.getLength()) {
                pos = 0;
            }
            while (pos + findLength <= doc.getLength()) {
                // Extract the text from teh docuemnt
                String match = doc.getText(pos, findLength).toLowerCase();
                // Check to see if it matches or request
                if (match.equals(busqueda.getText())) {
                    found = true;
                    break;
                }
                pos++;
            }
            if (found) {
                tmpL.text_pane.setSelectionStart(pos);
                tmpL.text_pane.setSelectionEnd(pos + busqueda.getText().length());
                tmpL.text_pane.getCaret().setSelectionVisible(true);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_buscarActionPerformed

    private void busquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busquedaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_busquedaActionPerformed

    /**
     * @param args the command line arguments
    */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazD().setVisible(true);
            }
        });
    }
    
    private void posicionPuntero(LineasText lines){
        lines.text_pane.addCaretListener(new CaretListener(){          
            @Override
            public void caretUpdate(CaretEvent e) {
                int pos = e.getDot();
		int fila = 1, columna=0;
		int ultimalinea=-1;
		String text =lines.text_pane.getText().replaceAll("\r","");
				
		for(int i=0;i<pos;i++){
                    if(text.charAt(i)==10){
                        fila++;
                        ultimalinea=i;
                    }
                }		
		columna=pos-ultimalinea;                
                noLinea.setText(fila +"");
                noColumna.setText(columna+"");
            }
        });
    }
 
    public static  String leerArchivo(String ruta){
        String texto=""; 
        try  {
              BufferedReader bf = new BufferedReader(new FileReader(ruta));
              String bflinea;
              while((bflinea=bf.readLine())!=null ){
              texto+=bflinea+"\n";
              }
              bf.close();
          } catch (Exception e) {
              System.err.println("Lectura Incorrecta de archivo");
          }
        
        return  texto;
    }
    
    private  void notificar(String mensaje){
        consola.append(mensaje+"\n");
    }
    
    private boolean notificarErrrores(){
        if(!listaErrores.isEmpty()){
            for (String Error : listaErrores) {
                errores.append(Error+"\n");
            }
            return true;
        }
        return false;
    }
    
    public void escribirArchivo(String Ruta,String texto){
   
        FileWriter arch=null;
        PrintWriter  pw;
        try{
            arch = new FileWriter(Ruta);
            pw = new PrintWriter(arch);
            //String tmp=ordenar_instancias();
            pw.println(texto);
            
            if (null !=arch){
                arch.close();
                notificar("Archivo creado correctamente...");
            }
        }catch(Exception e){
            notificar("Error al crear archivo xml: "+e);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Archivo;
    private javax.swing.JMenuItem actualiza;
    private javax.swing.JTree arbol;
    private javax.swing.JButton buscar;
    private javax.swing.JTextField busqueda;
    private javax.swing.JMenuItem cargar;
    private javax.swing.JMenuItem compila;
    private javax.swing.JTextArea consola;
    private javax.swing.JButton continuar;
    public javax.swing.JTextArea dasm;
    private javax.swing.JButton debug;
    private javax.swing.JTextArea errores;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel noColumna;
    private javax.swing.JLabel noLinea;
    private javax.swing.JMenuItem nuevoDasm;
    private javax.swing.JMenuItem nuevo_dpp;
    private javax.swing.JMenuItem nuevo_ds;
    private javax.swing.JMenuItem quitarpest;
    private javax.swing.JTabbedPane salidas;
    private javax.swing.JButton siguiente;
    public javax.swing.JTable tHeap;
    public javax.swing.JTable tPila;
    public javax.swing.JTable tStack;
    public javax.swing.JTable tablaS;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JMenuItem verDibujo;
    // End of variables declaration//GEN-END:variables

}
