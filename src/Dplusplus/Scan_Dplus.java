/* The following code was generated by JFlex 1.4.3 on 11/5/18 11:30 AM */

package Dplusplus;

//import ManejoErrores.ListaErrores;
//import usac_web.Interfaz_Web;
import java_cup.runtime.Symbol;
import static draco_web.InterfazD.listaErrores;
import draco_web.Pintar;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/5/18 11:30 AM from the specification file
 * <tt>src/Dplusplus/lexico.jflex</tt>
 */
public class Scan_Dplus implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CHARMEL = 8;
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO2 = 6;
  public static final int COMENTARIO1 = 4;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  8,  0,  7,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 25, 45,  0,  0,  0, 24,  3,  9, 10,  2, 20, 15, 21,  5,  1, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 17, 16, 27, 18, 26, 19, 
     0,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 13,  0, 14, 22,  6, 
     0, 34, 43, 38, 41, 35, 44,  6,  6, 28,  6,  6, 42, 29, 40, 31, 
    30,  6, 32, 36, 33, 37, 39,  6,  6,  6,  6, 11, 23, 12,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\1\1\30\1\31\1\32\16\7\1\33\1\34\1\35"+
    "\1\36\1\37\1\34\1\40\1\41\1\42\1\43\1\44"+
    "\1\0\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\11\7\1\55\12\7\1\56\1\57\32\7\1\60"+
    "\5\7\1\61\6\7\1\62\11\7\1\63\1\64\7\7"+
    "\1\65\3\7\1\66\1\7\1\67\6\7\1\70\2\7"+
    "\1\71\17\7\1\72\1\73\1\7\1\74\1\75\1\76"+
    "\1\7\1\77\2\7\1\100\1\101\1\102\1\103\1\7"+
    "\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\346"+
    "\0\346\0\u0142\0\346\0\u0170\0\346\0\346\0\346\0\346"+
    "\0\346\0\346\0\346\0\346\0\346\0\346\0\346\0\u019e"+
    "\0\346\0\u01cc\0\u01fa\0\346\0\u0228\0\u0256\0\346\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\346"+
    "\0\346\0\346\0\346\0\346\0\u0564\0\346\0\346\0\346"+
    "\0\346\0\346\0\u0592\0\346\0\346\0\346\0\346\0\346"+
    "\0\346\0\346\0\346\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\346"+
    "\0\u0592\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c"+
    "\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc"+
    "\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\u0dd6\0\u0170\0\u0e04\0\u0e32\0\u0e60\0\u0e8e"+
    "\0\u0ebc\0\u0170\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0"+
    "\0\u0170\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u1140\0\u116e\0\u0170\0\u0170\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u0170\0\u12de\0\u130c\0\u133a\0\u0170"+
    "\0\u1368\0\u0170\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c"+
    "\0\u0170\0\u14aa\0\u14d8\0\u0170\0\u1506\0\u1534\0\u1562\0\u1590"+
    "\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700"+
    "\0\u172e\0\u175c\0\u178a\0\u0170\0\u0170\0\u17b8\0\u0170\0\u0170"+
    "\0\u0170\0\u17e6\0\u0170\0\u1814\0\u1842\0\u0170\0\u0170\0\u0170"+
    "\0\u0170\0\u1870\0\u0170\0\u0170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\2\14\1\47\1\50\1\14\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\10\61\1\62\44\61"+
    "\1\63\10\61\1\64\47\61\1\65\53\61\3\66\1\67"+
    "\4\66\1\70\45\66\57\0\1\71\1\72\57\0\1\12"+
    "\1\73\54\0\1\14\1\0\1\14\25\0\21\14\23\0"+
    "\1\74\57\0\1\75\56\0\1\76\57\0\1\77\56\0"+
    "\1\100\47\0\1\101\55\0\1\102\7\0\1\103\27\0"+
    "\1\14\1\0\1\14\25\0\1\14\1\104\17\14\5\0"+
    "\1\14\1\0\1\14\25\0\1\105\20\14\5\0\1\14"+
    "\1\0\1\14\25\0\4\14\1\106\1\14\1\107\2\14"+
    "\1\110\7\14\5\0\1\14\1\0\1\14\25\0\13\14"+
    "\1\111\5\14\5\0\1\14\1\0\1\14\25\0\7\14"+
    "\1\112\11\14\5\0\1\14\1\0\1\14\25\0\10\14"+
    "\1\113\3\14\1\114\4\14\5\0\1\14\1\0\1\14"+
    "\25\0\1\115\20\14\5\0\1\14\1\0\1\14\25\0"+
    "\3\14\1\116\2\14\1\117\2\14\1\120\7\14\5\0"+
    "\1\14\1\0\1\14\25\0\6\14\1\121\1\122\11\14"+
    "\5\0\1\14\1\0\1\14\25\0\11\14\1\123\7\14"+
    "\5\0\1\14\1\0\1\14\25\0\7\14\1\124\11\14"+
    "\5\0\1\14\1\0\1\14\25\0\1\125\20\14\5\0"+
    "\1\14\1\0\1\14\25\0\3\14\1\126\15\14\5\0"+
    "\1\14\1\0\1\14\25\0\6\14\1\127\12\14\2\0"+
    "\1\130\60\0\1\131\55\0\1\14\1\0\1\14\25\0"+
    "\2\14\1\132\16\14\5\0\1\14\1\0\1\14\25\0"+
    "\7\14\1\133\11\14\5\0\1\14\1\0\1\14\25\0"+
    "\1\134\20\14\5\0\1\14\1\0\1\14\25\0\4\14"+
    "\1\135\14\14\5\0\1\14\1\0\1\14\25\0\14\14"+
    "\1\136\4\14\5\0\1\14\1\0\1\14\25\0\6\14"+
    "\1\137\12\14\5\0\1\14\1\0\1\14\25\0\5\14"+
    "\1\140\13\14\5\0\1\14\1\0\1\14\25\0\5\14"+
    "\1\141\13\14\5\0\1\14\1\0\1\14\25\0\5\14"+
    "\1\142\13\14\5\0\1\14\1\0\1\14\25\0\14\14"+
    "\1\143\4\14\5\0\1\14\1\0\1\14\25\0\14\14"+
    "\1\144\4\14\5\0\1\14\1\0\1\14\25\0\4\14"+
    "\1\145\10\14\1\146\3\14\5\0\1\14\1\0\1\14"+
    "\25\0\6\14\1\147\12\14\5\0\1\14\1\0\1\14"+
    "\25\0\12\14\1\150\6\14\5\0\1\14\1\0\1\14"+
    "\25\0\4\14\1\151\14\14\5\0\1\14\1\0\1\14"+
    "\25\0\16\14\1\152\2\14\5\0\1\14\1\0\1\14"+
    "\25\0\5\14\1\153\4\14\1\154\6\14\5\0\1\14"+
    "\1\0\1\14\25\0\14\14\1\155\4\14\5\0\1\14"+
    "\1\0\1\14\25\0\3\14\1\156\15\14\5\0\1\14"+
    "\1\0\1\14\25\0\16\14\1\157\2\14\5\0\1\14"+
    "\1\0\1\14\25\0\3\14\1\160\1\161\14\14\5\0"+
    "\1\14\1\0\1\14\25\0\14\14\1\162\4\14\5\0"+
    "\1\14\1\0\1\14\25\0\14\14\1\163\4\14\5\0"+
    "\1\14\1\0\1\14\25\0\6\14\1\164\12\14\5\0"+
    "\1\14\1\0\1\14\25\0\5\14\1\165\13\14\5\0"+
    "\1\14\1\0\1\14\25\0\16\14\1\166\2\14\5\0"+
    "\1\14\1\0\1\14\25\0\3\14\1\167\15\14\5\0"+
    "\1\14\1\0\1\14\25\0\4\14\1\170\14\14\5\0"+
    "\1\14\1\0\1\14\25\0\7\14\1\171\11\14\5\0"+
    "\1\14\1\0\1\14\25\0\3\14\1\172\15\14\5\0"+
    "\1\14\1\0\1\14\25\0\5\14\1\173\13\14\5\0"+
    "\1\14\1\0\1\14\25\0\6\14\1\174\12\14\5\0"+
    "\1\14\1\0\1\14\25\0\7\14\1\175\11\14\5\0"+
    "\1\14\1\0\1\14\25\0\15\14\1\176\3\14\5\0"+
    "\1\14\1\0\1\14\25\0\1\177\20\14\5\0\1\14"+
    "\1\0\1\14\25\0\15\14\1\200\3\14\5\0\1\14"+
    "\1\0\1\14\25\0\3\14\1\201\15\14\5\0\1\14"+
    "\1\0\1\14\25\0\7\14\1\202\11\14\5\0\1\14"+
    "\1\0\1\14\25\0\1\203\20\14\5\0\1\14\1\0"+
    "\1\14\25\0\7\14\1\204\11\14\5\0\1\14\1\0"+
    "\1\14\25\0\16\14\1\205\2\14\5\0\1\14\1\0"+
    "\1\14\25\0\10\14\1\206\10\14\5\0\1\14\1\0"+
    "\1\14\25\0\4\14\1\207\14\14\5\0\1\14\1\0"+
    "\1\14\25\0\1\210\20\14\5\0\1\14\1\0\1\14"+
    "\25\0\5\14\1\211\13\14\5\0\1\14\1\0\1\14"+
    "\25\0\12\14\1\212\6\14\5\0\1\14\1\0\1\14"+
    "\25\0\3\14\1\213\15\14\5\0\1\14\1\0\1\14"+
    "\25\0\3\14\1\214\15\14\5\0\1\14\1\0\1\14"+
    "\25\0\4\14\1\215\14\14\5\0\1\14\1\0\1\14"+
    "\25\0\11\14\1\216\7\14\5\0\1\14\1\0\1\14"+
    "\25\0\4\14\1\217\14\14\5\0\1\14\1\0\1\14"+
    "\25\0\1\220\20\14\5\0\1\14\1\0\1\14\25\0"+
    "\12\14\1\221\6\14\5\0\1\14\1\0\1\14\25\0"+
    "\14\14\1\222\4\14\5\0\1\14\1\0\1\14\25\0"+
    "\4\14\1\223\14\14\5\0\1\14\1\0\1\14\25\0"+
    "\3\14\1\224\15\14\5\0\1\14\1\0\1\14\25\0"+
    "\6\14\1\225\12\14\5\0\1\14\1\0\1\14\25\0"+
    "\14\14\1\226\4\14\5\0\1\14\1\0\1\14\25\0"+
    "\1\14\1\227\17\14\5\0\1\14\1\0\1\14\25\0"+
    "\6\14\1\230\12\14\5\0\1\14\1\0\1\14\25\0"+
    "\7\14\1\231\11\14\5\0\1\14\1\0\1\14\25\0"+
    "\3\14\1\232\15\14\5\0\1\14\1\0\1\14\25\0"+
    "\5\14\1\233\13\14\5\0\1\14\1\0\1\14\25\0"+
    "\1\14\1\234\17\14\5\0\1\14\1\0\1\14\25\0"+
    "\4\14\1\235\14\14\5\0\1\14\1\0\1\14\25\0"+
    "\1\236\20\14\5\0\1\14\1\0\1\14\25\0\14\14"+
    "\1\237\4\14\5\0\1\14\1\0\1\14\25\0\12\14"+
    "\1\240\6\14\5\0\1\14\1\0\1\14\25\0\3\14"+
    "\1\241\15\14\5\0\1\14\1\0\1\14\25\0\14\14"+
    "\1\242\4\14\5\0\1\14\1\0\1\14\25\0\5\14"+
    "\1\243\13\14\5\0\1\14\1\0\1\14\25\0\6\14"+
    "\1\244\12\14\5\0\1\14\1\0\1\14\25\0\6\14"+
    "\1\245\12\14\5\0\1\14\1\0\1\14\25\0\15\14"+
    "\1\246\3\14\5\0\1\14\1\0\1\14\25\0\7\14"+
    "\1\247\11\14\5\0\1\14\1\0\1\14\25\0\6\14"+
    "\1\250\12\14\5\0\1\14\1\0\1\14\25\0\6\14"+
    "\1\251\12\14\5\0\1\14\1\0\1\14\25\0\6\14"+
    "\1\252\12\14\5\0\1\14\1\0\1\14\25\0\1\253"+
    "\20\14\5\0\1\14\1\0\1\14\25\0\6\14\1\254"+
    "\12\14\5\0\1\14\1\0\1\14\25\0\2\14\1\255"+
    "\16\14\5\0\1\14\1\0\1\14\25\0\6\14\1\256"+
    "\12\14\5\0\1\14\1\0\1\14\25\0\5\14\1\257"+
    "\13\14\5\0\1\14\1\0\1\14\25\0\11\14\1\260"+
    "\7\14\5\0\1\14\1\0\1\14\25\0\7\14\1\261"+
    "\11\14\5\0\1\14\1\0\1\14\25\0\15\14\1\262"+
    "\3\14\5\0\1\14\1\0\1\14\25\0\7\14\1\263"+
    "\11\14\5\0\1\14\1\0\1\14\25\0\4\14\1\264"+
    "\14\14\5\0\1\14\1\0\1\14\25\0\16\14\1\265"+
    "\2\14\5\0\1\14\1\0\1\14\25\0\14\14\1\266"+
    "\4\14\5\0\1\14\1\0\1\14\25\0\4\14\1\267"+
    "\14\14\5\0\1\14\1\0\1\14\25\0\4\14\1\270"+
    "\14\14\5\0\1\14\1\0\1\14\25\0\10\14\1\271"+
    "\10\14\5\0\1\14\1\0\1\14\25\0\6\14\1\272"+
    "\12\14\5\0\1\14\1\0\1\14\25\0\4\14\1\273"+
    "\14\14\5\0\1\14\1\0\1\14\25\0\11\14\1\274"+
    "\7\14\5\0\1\14\1\0\1\14\25\0\6\14\1\275"+
    "\12\14\5\0\1\14\1\0\1\14\25\0\4\14\1\276"+
    "\14\14\5\0\1\14\1\0\1\14\25\0\3\14\1\277"+
    "\15\14\5\0\1\14\1\0\1\14\25\0\4\14\1\206"+
    "\14\14\5\0\1\14\1\0\1\14\25\0\3\14\1\300"+
    "\15\14\5\0\1\14\1\0\1\14\25\0\16\14\1\301"+
    "\2\14\5\0\1\14\1\0\1\14\25\0\4\14\1\302"+
    "\14\14\5\0\1\14\1\0\1\14\25\0\4\14\1\303"+
    "\14\14\5\0\1\14\1\0\1\14\25\0\6\14\1\304"+
    "\12\14\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6302];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\11\1\1\1\11\1\1\13\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\11\20\1\5\11"+
    "\1\1\5\11\1\0\10\11\24\1\1\11\154\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[196];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    //Código de usuario
    String cadena= "";
    String charm = "";
    public String nomArch ="";
    public Pintar pintar;
    int inicio=0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scan_Dplus(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scan_Dplus(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { inicio= yychar; yybegin(COMENTARIO1);
          }
        case 70: break;
        case 19: 
          { return new Symbol(sym.ASIG, yyline,yycolumn,yytext());
          }
        case 71: break;
        case 44: 
          { return new Symbol(sym.DIFERENTE, yyline,yycolumn,yytext());
          }
        case 72: break;
        case 58: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.detener, yyline,yycolumn,yytext());
          }
        case 73: break;
        case 18: 
          { return new Symbol(sym.DPUNTOS, yyline,yycolumn,yytext());
          }
        case 74: break;
        case 10: 
          { return new Symbol(sym.PAR_A, yyline,yycolumn,yytext());
          }
        case 75: break;
        case 32: 
          { charm+=yytext();
          }
        case 76: break;
        case 63: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.retornar, yyline,yycolumn,yytext());
          }
        case 77: break;
        case 41: 
          { return new Symbol(sym.AND, yyline,yycolumn,yytext());
          }
        case 78: break;
        case 25: 
          { return new Symbol(sym.MAYOR,yyline, yycolumn,yytext());
          }
        case 79: break;
        case 23: 
          { return new Symbol(sym.POT, yyline,yycolumn,yytext());
          }
        case 80: break;
        case 2: 
          { return new Symbol(sym.DIV, yyline,yycolumn,yytext());
          }
        case 81: break;
        case 49: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.sino, yyline,yycolumn,yytext());
          }
        case 82: break;
        case 65: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.cuadrado, yyline, yycolumn,yytext());
          }
        case 83: break;
        case 45: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.si, yyline,yycolumn,yytext());
          }
        case 84: break;
        case 38: 
          { return new Symbol(sym.INC, yyline,yycolumn,yytext());
          }
        case 85: break;
        case 12: 
          { return new Symbol(sym.LLAV_A, yyline,yycolumn,yytext());
          }
        case 86: break;
        case 8: 
          { /*Espacios en blanco, ignorados*/
          }
        case 87: break;
        case 48: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.para, yyline,yycolumn,yytext());
          }
        case 88: break;
        case 53: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.vacio, yyline,yycolumn,yytext());
          }
        case 89: break;
        case 47: 
          { pintar.pintaMora(yychar,yylength()); return new Symbol(sym.decim, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 33: 
          { String tmp=charm; charm=""; 
            if(tmp.length() > 1){  
                String error="ERROR LEXICO: Caracter invalido, solo se permite un caracter. ->  " + tmp + " L: " + (yyline+1) + " C: " + (yycolumn+1) + " Archivo" + nomArch;
                listaErrores.add(error);
                System.out.println(error);               
                yybegin(YYINITIAL);
            }else{
                yybegin(YYINITIAL);
                pintar.pintaNara(inicio,tmp.length()+2);
                return new Symbol(sym.carac,yyline,yycolumn,tmp); 
            }
          }
        case 91: break;
        case 66: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.booleano, yyline,yycolumn,yytext());
          }
        case 92: break;
        case 22: 
          { return new Symbol(sym.MENOS, yyline,yycolumn,yytext());
          }
        case 93: break;
        case 43: 
          { return new Symbol(sym.MENOR_I, yyline,yycolumn,yytext());
          }
        case 94: break;
        case 50: 
          { pintar.pintaAmari(yychar,yylength()); return new Symbol(sym.nulo, yyline,yycolumn,yytext());
          }
        case 95: break;
        case 34: 
          { String tmp=charm; charm="";
                String error="ERROR LEXICO: Caracter invalido, se esperaba cierre de caracter. ->  " + tmp + " L: " + (yyline+1) + " C: " + (yycolumn+1) + " Archivo" + nomArch;
                listaErrores.add(error);
                System.out.println(error);
                yybegin(YYINITIAL);
          }
        case 96: break;
        case 69: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.struct, yyline,yycolumn,yytext());
          }
        case 97: break;
        case 30: 
          { String tmp=cadena;/*+"\"";*/ cadena=""; pintar.pintaNara(inicio,tmp.length()+2); yybegin(YYINITIAL);  return new Symbol(sym.cad,yyline,yycolumn,tmp);
          }
        case 98: break;
        case 14: 
          { return new Symbol(sym.COR_A, yyline,yycolumn,yytext());
          }
        case 99: break;
        case 56: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.entero, yyline,yycolumn,yytext());
          }
        case 100: break;
        case 40: 
          { return new Symbol(sym.OR, yyline,yycolumn,yytext());
          }
        case 101: break;
        case 60: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.impor, yyline,yycolumn,yytext());
          }
        case 102: break;
        case 17: 
          { return new Symbol(sym.PYCOMA, yyline,yycolumn,yytext());
          }
        case 103: break;
        case 42: 
          { return new Symbol(sym.MAYOR_I, yyline,yycolumn,yytext());
          }
        case 104: break;
        case 11: 
          { return new Symbol(sym.PAR_C, yyline,yycolumn,yytext());
          }
        case 105: break;
        case 7: 
          { pintar.pintaRojo(yychar,yylength()); return new Symbol(sym.id, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 59: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.decimal, yyline,yycolumn,yytext());
          }
        case 107: break;
        case 31: 
          { String tmp=cadena; cadena=""; pintar.pintaGris(inicio,tmp.length()+2); yybegin(YYINITIAL);
          }
        case 108: break;
        case 28: 
          { cadena+=yytext();
          }
        case 109: break;
        case 46: 
          { String tmp=cadena; cadena=""; pintar.pintaGris(inicio,tmp.length()+4); yybegin(YYINITIAL);
          }
        case 110: break;
        case 62: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.mientras, yyline,yycolumn,yytext());
          }
        case 111: break;
        case 13: 
          { return new Symbol(sym.LLAV_C, yyline,yycolumn,yytext());
          }
        case 112: break;
        case 4: 
          { inicio=yychar; yybegin(CHARMEL);
          }
        case 113: break;
        case 26: 
          { return new Symbol(sym.MENOR, yyline,yycolumn,yytext());
          }
        case 114: break;
        case 16: 
          { return new Symbol(sym.COMA, yyline,yycolumn,yytext());
          }
        case 115: break;
        case 9: 
          { /*Saltos de linea, ignorados*/
          }
        case 116: break;
        case 52: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.ovalo, yyline,yycolumn,yytext());
          }
        case 117: break;
        case 5: 
          { pintar.pintaMora(yychar,yylength()); return new Symbol(sym.enter, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 64: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.caracter, yyline,yycolumn,yytext());
          }
        case 119: break;
        case 61: 
          { pintar.pintaAzul(yychar,yylength());  return new Symbol(sym.imprimir, yyline,yycolumn,yytext());
          }
        case 120: break;
        case 15: 
          { return new Symbol(sym.COR_C, yyline,yycolumn,yytext());
          }
        case 121: break;
        case 55: 
          { pintar.pintaVerde(yychar,yylength()); return new Symbol(sym.bool, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 36: 
          { inicio=yychar; yybegin(COMENTARIO2);
          }
        case 123: break;
        case 3: 
          { return new Symbol(sym.POR, yyline,yycolumn,yytext());
          }
        case 124: break;
        case 29: 
          { String tmp=cadena; cadena="";
                String error="ERROR LEXICO: Cadena invalida, se esperaba cierre de cadena. ->  " + tmp + " L: " + (yyline+1) + " C: " + (yycolumn+1) + " Archivo" + nomArch;
                listaErrores.add(error);
                System.out.println(error);
                yybegin(YYINITIAL);
          }
        case 125: break;
        case 57: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.cadena, yyline,yycolumn,yytext());
          }
        case 126: break;
        case 39: 
          { return new Symbol(sym.DEC, yyline,yycolumn,yytext());
          }
        case 127: break;
        case 67: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.principal, yyline,yycolumn,yytext());
          }
        case 128: break;
        case 54: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.linea, yycolumn,yyline,yytext());
          }
        case 129: break;
        case 27: 
          { inicio=yychar; yybegin(CADENA); /*cadena="";*/
          }
        case 130: break;
        case 68: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.continuar, yyline,yycolumn,yytext());
          }
        case 131: break;
        case 51: 
          { pintar.pintaAzul(yychar,yylength()); return new Symbol(sym.punto, yyline,yycolumn,yytext());
          }
        case 132: break;
        case 6: 
          { return new Symbol(sym.PUNTO, yyline,yycolumn,yytext());
          }
        case 133: break;
        case 1: 
          { //Interfaz_Web.listaErrores.insertarError("Error Lexico", yytext(),(yycolumn+1)+"",(yyline+1)+"","El caracter no pertenece al lenguaje",Interfaz_Web.doc_actual);
                    String error = "ERROR LEXICO: Caracter invalido ->  " + yytext() + " L: " + (yyline+1) + " C: " + (yycolumn+1) + " Archivo" + nomArch;
                    listaErrores.add(error);
                    System.out.println(error);
          }
        case 134: break;
        case 20: 
          { return new Symbol(sym.PREG, yyline,yycolumn,yytext());
          }
        case 135: break;
        case 24: 
          { return new Symbol(sym.NOT, yyline,yycolumn,yytext());
          }
        case 136: break;
        case 37: 
          { return new Symbol(sym.IGUAL, yyline,yycolumn,yytext());
          }
        case 137: break;
        case 21: 
          { return new Symbol(sym.MAS, yyline,yycolumn,yytext());
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
