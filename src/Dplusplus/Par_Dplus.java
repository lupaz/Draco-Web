
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Dplusplus;

import AST.Nodo;
import draco_web.InterfazD;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Par_Dplus extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Par_Dplus() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Par_Dplus(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Par_Dplus(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\003\003\000\002\003\002" +
    "\000\002\004\010\000\002\004\007\000\002\007\007\000" +
    "\002\007\012\000\002\007\012\000\002\007\011\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\004" +
    "\000\002\007\004\000\002\031\006\000\002\033\006\000" +
    "\002\032\007\000\002\034\007\000\002\034\011\000\002" +
    "\034\012\000\002\046\010\000\002\047\011\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\021\004\000" +
    "\002\021\002\000\002\022\004\000\002\022\002\000\002" +
    "\025\005\000\002\026\003\000\002\026\003\000\002\027" +
    "\005\000\002\027\003\000\002\024\006\000\002\024\005" +
    "\000\002\020\004\000\002\020\003\000\002\030\003\000" +
    "\002\030\003\000\002\023\005\000\002\023\003\000\002" +
    "\012\003\000\002\012\002\000\002\043\005\000\002\043" +
    "\003\000\002\013\003\000\002\013\002\000\002\044\006" +
    "\000\002\044\004\000\002\006\004\000\002\006\003\000" +
    "\002\010\012\000\002\010\011\000\002\010\015\000\002" +
    "\010\004\000\002\010\004\000\002\010\005\000\002\010" +
    "\007\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\015\000\002\010\017\000\002" +
    "\010\017\000\002\010\015\000\002\010\021\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\040\003" +
    "\000\002\040\002\000\002\045\004\000\002\045\003\000" +
    "\002\041\012\000\002\041\006\000\002\035\006\000\002" +
    "\035\006\000\002\035\005\000\002\017\004\000\002\017" +
    "\004\000\002\036\003\000\002\036\002\000\002\037\006" +
    "\000\002\014\005\000\002\014\005\000\002\014\007\000" +
    "\002\014\003\000\002\015\005\000\002\015\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\004\000\002\016\004\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\005\000\002\016\006\000\002\016\004\000\002\016\006" +
    "\000\002\016\007\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\026\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\014\006\015\ufffc\016\ufffc\001\002" +
    "\000\026\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\014\u0146\015\ufffd\016\ufffd\001\002\000\024" +
    "\003\033\004\035\005\020\006\022\007\024\010\017\011" +
    "\023\015\032\016\031\001\002\000\004\024\011\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\004\023\012\001\002\000\004\025\013\001\002\000\004" +
    "\035\014\001\002\000\026\003\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\001\002\000\026\002\ufff0\003\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\015\ufff0\016\ufff0\001\002" +
    "\000\026\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\015\ufff3\016\ufff3\001\002\000\004" +
    "\016\uffe5\001\002\000\004\016\uffe2\001\002\000\026\002" +
    "\000\003\033\004\035\005\020\006\022\007\024\010\017" +
    "\011\023\015\032\016\031\001\002\000\004\016\uffe4\001" +
    "\002\000\006\013\u0138\016\u0139\001\002\000\004\016\uffe1" +
    "\001\002\000\004\016\233\001\002\000\026\002\ufffe\003" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\015\ufffe\016\ufffe\001\002\000\026\002\ufff1\003\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\015\ufff1" +
    "\016\ufff1\001\002\000\026\002\ufff4\003\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\015\ufff4\016\ufff4" +
    "\001\002\000\012\016\uffe0\030\053\034\202\050\204\001" +
    "\002\000\004\016\041\001\002\000\006\027\040\035\037" +
    "\001\002\000\026\002\ufff2\003\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\015\ufff2\016\ufff2\001\002" +
    "\000\004\016\uffe3\001\002\000\026\002\ufff5\003\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\015\ufff5" +
    "\016\ufff5\001\002\000\026\002\uffef\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\015\uffef\016\uffef" +
    "\001\002\000\026\002\uffee\003\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\015\uffee\016\uffee\001\002" +
    "\000\004\026\042\001\002\000\016\004\035\005\020\006" +
    "\022\007\024\010\017\016\044\001\002\000\020\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\016\uffd3\027\uffd3\001" +
    "\002\000\004\016\uffe0\001\002\000\020\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\016\uffd1\027\uffd1\001\002\000" +
    "\020\004\035\005\020\006\022\007\024\010\017\016\044" +
    "\027\201\001\002\000\004\016\052\001\002\000\020\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\016\uffd2\027\uffd2" +
    "\001\002\000\010\032\172\035\uffde\050\174\001\002\000" +
    "\012\030\053\032\uffcf\035\uffcf\050\uffcf\001\002\000\026" +
    "\012\100\016\102\017\104\020\105\021\077\022\101\023" +
    "\103\024\074\037\063\047\072\001\002\000\010\030\056" +
    "\035\uffdc\050\057\001\002\000\004\035\167\001\002\000" +
    "\026\012\100\016\102\017\104\020\105\021\077\022\101" +
    "\023\103\024\074\037\063\047\072\001\002\000\004\026" +
    "\060\001\002\000\032\012\100\016\102\017\104\020\105" +
    "\021\077\022\101\023\103\024\074\026\060\027\uffcd\037" +
    "\063\047\072\001\002\000\004\035\uffdd\001\002\000\052" +
    "\025\uff8c\027\uff8c\031\uff8c\032\uff8c\033\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\045\uff8c\046\uff8c" +
    "\051\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060" +
    "\uff8c\001\002\000\026\012\100\016\102\017\104\020\105" +
    "\021\077\022\101\023\103\024\074\037\063\047\072\001" +
    "\002\000\052\025\uff9b\027\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\035\uff9b\036\150\037\144\040\151\041\147\042\146\045" +
    "\uff9b\046\uff9b\051\uff9b\053\152\054\145\055\154\056\142" +
    "\057\153\060\155\001\002\000\004\027\141\001\002\000" +
    "\052\025\uff8b\027\uff8b\031\uff8b\032\uff8b\033\uff8b\035\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\045\uff8b\046" +
    "\uff8b\051\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b" +
    "\060\uff8b\001\002\000\006\027\uffda\032\137\001\002\000" +
    "\052\025\uff9d\027\uff9d\031\uff9d\032\uff9d\033\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\045\uff9d\046" +
    "\uff9d\051\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\001\002\000\010\025\uffce\027\uffce\032\135\001" +
    "\002\000\026\012\100\016\102\017\104\020\105\021\077" +
    "\022\101\023\103\024\074\037\063\047\072\001\002\000" +
    "\006\027\uffd7\032\uffd7\001\002\000\026\012\100\016\102" +
    "\017\104\020\105\021\077\022\101\023\103\024\074\037" +
    "\063\047\072\001\002\000\016\025\uffcb\027\uffcb\032\uffcb" +
    "\045\124\046\122\051\123\001\002\000\004\027\uffd9\001" +
    "\002\000\052\025\uff82\027\uff82\031\uff82\032\uff82\033\uff82" +
    "\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\045" +
    "\uff82\046\uff82\051\uff82\053\uff82\054\uff82\055\uff82\056\uff82" +
    "\057\uff82\060\uff82\001\002\000\052\025\uff7f\027\uff7f\031" +
    "\uff7f\032\uff7f\033\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f" +
    "\041\uff7f\042\uff7f\045\uff7f\046\uff7f\051\uff7f\053\uff7f\054" +
    "\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\001\002\000\052" +
    "\025\uff81\027\uff81\031\uff81\032\uff81\033\uff81\035\uff81\036" +
    "\uff81\037\uff81\040\uff81\041\uff81\042\uff81\045\uff81\046\uff81" +
    "\051\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060" +
    "\uff81\001\002\000\064\024\107\025\uff85\027\uff85\030\053" +
    "\031\uff85\032\uff85\033\uff85\034\106\035\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\110\044\112\045\uff85" +
    "\046\uff85\051\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057" +
    "\uff85\060\uff85\001\002\000\052\025\uff80\027\uff80\031\uff80" +
    "\032\uff80\033\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041" +
    "\uff80\042\uff80\045\uff80\046\uff80\051\uff80\053\uff80\054\uff80" +
    "\055\uff80\056\uff80\057\uff80\060\uff80\001\002\000\052\025" +
    "\uff84\027\uff84\031\uff84\032\uff84\033\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\045\uff84\046\uff84\051" +
    "\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84" +
    "\001\002\000\052\025\uff83\027\uff83\031\uff83\032\uff83\033" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\045\uff83\046\uff83\051\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\060\uff83\001\002\000\004\016\120\001\002" +
    "\000\030\012\100\016\102\017\104\020\105\021\077\022" +
    "\101\023\103\024\074\025\uffcd\037\063\047\072\001\002" +
    "\000\052\025\uffa5\027\uffa5\031\uffa5\032\uffa5\033\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\045\uffa5" +
    "\046\uffa5\051\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\001\002\000\056\025\uff88\027\uff88\030\056" +
    "\031\uff88\032\uff88\033\uff88\034\113\035\uff88\036\uff88\037" +
    "\uff88\040\uff88\041\uff88\042\uff88\045\uff88\046\uff88\051\uff88" +
    "\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\001" +
    "\002\000\052\025\uffa4\027\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\045" +
    "\uffa4\046\uffa4\051\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\001\002\000\004\016\114\001\002\000" +
    "\054\025\uff87\027\uff87\030\053\031\uff87\032\uff87\033\uff87" +
    "\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\045" +
    "\uff87\046\uff87\051\uff87\053\uff87\054\uff87\055\uff87\056\uff87" +
    "\057\uff87\060\uff87\001\002\000\054\025\uff86\027\uff86\030" +
    "\056\031\uff86\032\uff86\033\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\041\uff86\042\uff86\045\uff86\046\uff86\051\uff86\053" +
    "\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\001\002" +
    "\000\004\025\117\001\002\000\052\025\uffa1\027\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\045\uffa1\046\uffa1\051\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\001\002\000\054" +
    "\025\uff8a\027\uff8a\030\053\031\uff8a\032\uff8a\033\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\045\uff8a" +
    "\046\uff8a\051\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057" +
    "\uff8a\060\uff8a\001\002\000\054\025\uff89\027\uff89\030\056" +
    "\031\uff89\032\uff89\033\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\045\uff89\046\uff89\051\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\001\002\000" +
    "\026\012\100\016\102\017\104\020\105\021\077\022\101" +
    "\023\103\024\074\037\063\047\072\001\002\000\026\012" +
    "\100\016\102\017\104\020\105\021\077\022\101\023\103" +
    "\024\074\037\063\047\072\001\002\000\026\012\100\016" +
    "\102\017\104\020\105\021\077\022\101\023\103\024\074" +
    "\037\063\047\072\001\002\000\052\025\uffa0\027\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\045\uffa0\046\uffa0\051\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\001\002\000\012" +
    "\033\127\045\124\046\122\051\123\001\002\000\026\012" +
    "\100\016\102\017\104\020\105\021\077\022\101\023\103" +
    "\024\074\037\063\047\072\001\002\000\052\025\uff9e\027" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\045\124\046\122\051\123\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\001\002" +
    "\000\052\025\uff9f\027\uff9f\031\uff9f\032\uff9f\033\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\045\uff9f" +
    "\046\uff9f\051\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\060\uff9f\001\002\000\012\025\133\045\124\046\122" +
    "\051\123\001\002\000\052\025\uff8d\027\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\045\uff8d\046\uff8d\051\uff8d\053\uff8d\054\uff8d\055" +
    "\uff8d\056\uff8d\057\uff8d\060\uff8d\001\002\000\052\025\uff8f" +
    "\027\uff8f\031\uff8f\032\uff8f\033\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\045\uff8f\046\uff8f\051\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\001" +
    "\002\000\026\012\100\016\102\017\104\020\105\021\077" +
    "\022\101\023\103\024\074\037\063\047\072\001\002\000" +
    "\016\025\uffcc\027\uffcc\032\uffcc\045\124\046\122\051\123" +
    "\001\002\000\004\026\060\001\002\000\006\027\uffd8\032" +
    "\uffd8\001\002\000\010\027\uffdb\032\uffdb\035\uffdb\001\002" +
    "\000\026\012\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\037\uff95\047\uff95\001\002\000\026" +
    "\012\100\016\102\017\104\020\105\021\077\022\101\023" +
    "\103\024\074\037\063\047\072\001\002\000\026\012\100" +
    "\016\102\017\104\020\105\021\077\022\101\023\103\024" +
    "\074\037\063\047\072\001\002\000\026\012\uff97\016\uff97" +
    "\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\037" +
    "\uff97\047\uff97\001\002\000\026\012\100\016\102\017\104" +
    "\020\105\021\077\022\101\023\103\024\074\037\063\047" +
    "\072\001\002\000\026\012\100\016\102\017\104\020\105" +
    "\021\077\022\101\023\103\024\074\037\063\047\072\001" +
    "\002\000\026\012\100\016\102\017\104\020\105\021\077" +
    "\022\101\023\103\024\074\037\063\047\072\001\002\000" +
    "\026\012\100\016\102\017\104\020\105\021\077\022\101" +
    "\023\103\024\074\037\063\047\072\001\002\000\026\012" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\037\uff98\047\uff98\001\002\000\026\012\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\037\uff9a\047\uff9a\001\002\000\026\012\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\037\uff96" +
    "\047\uff96\001\002\000\026\012\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\022\uff99\023\uff99\024\uff99\037\uff99\047\uff99" +
    "\001\002\000\052\025\uff91\027\uff91\031\uff91\032\uff91\033" +
    "\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\146" +
    "\045\uff91\046\uff91\051\uff91\053\uff91\054\uff91\055\uff91\056" +
    "\uff91\057\uff91\060\uff91\001\002\000\052\025\uff94\027\uff94" +
    "\031\uff94\032\uff94\033\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\151\041\147\042\146\045\uff94\046\uff94\051\uff94\053\uff94" +
    "\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\001\002\000" +
    "\052\025\uff92\027\uff92\031\uff92\032\uff92\033\uff92\035\uff92" +
    "\036\uff92\037\uff92\040\uff92\041\uff92\042\146\045\uff92\046" +
    "\uff92\051\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92" +
    "\060\uff92\001\002\000\052\025\uff90\027\uff90\031\uff90\032" +
    "\uff90\033\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\146\045\uff90\046\uff90\051\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\057\uff90\060\uff90\001\002\000\052\025\uff93" +
    "\027\uff93\031\uff93\032\uff93\033\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\151\041\147\042\146\045\uff93\046\uff93\051\uff93" +
    "\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93\001" +
    "\002\000\052\025\uff9c\027\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\035\uff9c\036\150\037\144\040\151\041\147\042\146\045" +
    "\uff9c\046\uff9c\051\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\060\uff9c\001\002\000\052\025\uff8e\027\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\045\uff8e\046\uff8e\051\uff8e\053\uff8e\054" +
    "\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\001\002\000\012" +
    "\031\166\045\124\046\122\051\123\001\002\000\060\025" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\045" +
    "\uffd6\046\uffd6\050\uffd6\051\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\001\002\000\056\002\uffeb\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\015\uffeb\016\uffeb\027\uffeb\061\uffeb\063\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\001\002\000\012\031\171\045\124\046\122\051" +
    "\123\001\002\000\060\025\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\001" +
    "\002\000\004\016\177\001\002\000\004\035\176\001\002" +
    "\000\026\012\100\016\102\017\104\020\105\021\077\022" +
    "\101\023\103\024\074\037\063\047\072\001\002\000\012" +
    "\035\uffdf\045\124\046\122\051\123\001\002\000\056\002" +
    "\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\015\uffed\016\uffed\027\uffed\061\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed" +
    "\073\uffed\074\uffed\001\002\000\010\032\uffd0\035\uffd0\050" +
    "\uffd0\001\002\000\020\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\016\uffd4\027\uffd4\001\002\000\026\002\ufff9\003" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\015\ufff9\016\ufff9\001\002\000\004\016\223\001\002\000" +
    "\010\030\056\034\207\050\210\001\002\000\026\012\100" +
    "\016\102\017\104\020\105\021\077\022\101\023\103\024" +
    "\074\037\063\047\072\001\002\000\012\035\206\045\124" +
    "\046\122\051\123\001\002\000\056\002\uffec\003\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\015\uffec" +
    "\016\uffec\027\uffec\061\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec" +
    "\001\002\000\004\016\213\001\002\000\026\012\100\016" +
    "\102\017\104\020\105\021\077\022\101\023\103\024\074" +
    "\037\063\047\072\001\002\000\012\035\212\045\124\046" +
    "\122\051\123\001\002\000\056\002\uffea\003\uffea\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\015\uffea\016" +
    "\uffea\027\uffea\061\uffea\063\uffea\064\uffea\065\uffea\066\uffea" +
    "\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\001" +
    "\002\000\006\030\053\050\215\001\002\000\006\030\056" +
    "\050\220\001\002\000\026\012\100\016\102\017\104\020" +
    "\105\021\077\022\101\023\103\024\074\037\063\047\072" +
    "\001\002\000\012\035\217\045\124\046\122\051\123\001" +
    "\002\000\056\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\015\uffe9\016\uffe9\027\uffe9\061" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9" +
    "\071\uffe9\072\uffe9\073\uffe9\074\uffe9\001\002\000\026\012" +
    "\100\016\102\017\104\020\105\021\077\022\101\023\103" +
    "\024\074\037\063\047\072\001\002\000\012\035\222\045" +
    "\124\046\122\051\123\001\002\000\056\002\uffe8\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\015" +
    "\uffe8\016\uffe8\027\uffe8\061\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\001\002\000\006\030\053\050\225\001\002\000\006" +
    "\030\056\050\230\001\002\000\026\012\100\016\102\017" +
    "\104\020\105\021\077\022\101\023\103\024\074\037\063" +
    "\047\072\001\002\000\012\035\227\045\124\046\122\051" +
    "\123\001\002\000\056\002\uffe7\003\uffe7\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\015\uffe7\016\uffe7\027" +
    "\uffe7\061\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\001\002\000" +
    "\026\012\100\016\102\017\104\020\105\021\077\022\101" +
    "\023\103\024\074\037\063\047\072\001\002\000\012\035" +
    "\232\045\124\046\122\051\123\001\002\000\056\002\uffe6" +
    "\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\015\uffe6\016\uffe6\027\uffe6\061\uffe6\063\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\001\002\000\014\024\234\030\053\032\uffcf" +
    "\035\uffcf\050\uffcf\001\002\000\020\004\035\005\020\006" +
    "\022\007\024\010\017\016\044\025\uffc9\001\002\000\006" +
    "\025\uffca\032\u0135\001\002\000\004\016\u0134\001\002\000" +
    "\004\025\240\001\002\000\004\026\241\001\002\000\046" +
    "\003\265\004\035\005\020\006\022\007\024\010\246\016" +
    "\262\061\271\063\245\064\252\065\267\066\263\067\260" +
    "\070\251\071\256\072\264\073\247\074\255\001\002\000" +
    "\004\035\u0133\001\002\000\050\003\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\016\uffbb\027\uffbb\061\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb" +
    "\072\uffbb\073\uffbb\074\uffbb\001\002\000\050\003\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\016\uffb8\027\uffb8" +
    "\061\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070" +
    "\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\001\002\000\004" +
    "\024\u011d\001\002\000\006\016\uffe5\024\u0113\001\002\000" +
    "\004\024\u0107\001\002\000\004\035\u0106\001\002\000\004" +
    "\024\u0102\001\002\000\004\024\374\001\002\000\050\003" +
    "\265\004\035\005\020\006\022\007\024\010\246\016\262" +
    "\027\373\061\271\063\245\064\252\065\267\066\263\067" +
    "\260\070\251\071\256\072\264\073\247\074\255\001\002" +
    "\000\050\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\016\uffc5\027\uffc5\061\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\001\002\000\004\024\355\001\002\000\004\024\343" +
    "\001\002\000\050\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\016\uffbc\027\uffbc\061\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073" +
    "\uffbc\074\uffbc\001\002\000\030\012\100\016\102\017\104" +
    "\020\105\021\077\022\101\023\103\024\074\035\uffa2\037" +
    "\063\047\072\001\002\000\050\003\uffb9\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\016\uffb9\027\uffb9\061\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9" +
    "\072\uffb9\073\uffb9\074\uffb9\001\002\000\020\016\uffe0\024" +
    "\107\030\053\034\202\043\110\044\112\050\204\001\002" +
    "\000\004\035\337\001\002\000\004\024\323\001\002\000" +
    "\006\027\322\035\321\001\002\000\050\003\uffb7\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\016\uffb7\027\uffb7\061" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\073\uffb7\074\uffb7\001\002\000\004\035" +
    "\320\001\002\000\050\003\uffba\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\016\uffba\027\uffba\061\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba" +
    "\073\uffba\074\uffba\001\002\000\004\024\272\001\002\000" +
    "\026\012\100\016\102\017\104\020\105\021\077\022\101" +
    "\023\103\024\074\037\063\047\072\001\002\000\012\025" +
    "\274\045\124\046\122\051\123\001\002\000\004\026\275" +
    "\001\002\000\046\003\265\004\035\005\020\006\022\007" +
    "\024\010\246\016\262\061\271\063\245\064\252\065\267" +
    "\066\263\067\260\070\251\071\256\072\264\073\247\074" +
    "\255\001\002\000\050\003\265\004\035\005\020\006\022" +
    "\007\024\010\246\016\262\027\277\061\271\063\245\064" +
    "\252\065\267\066\263\067\260\070\251\071\256\072\264" +
    "\073\247\074\255\001\002\000\052\003\uffad\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\016\uffad\027\uffad\061\uffad" +
    "\062\302\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070" +
    "\uffad\071\uffad\072\uffad\073\uffad\074\uffad\001\002\000\050" +
    "\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\016" +
    "\uffc6\027\uffc6\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\001" +
    "\002\000\052\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\016\uffae\027\uffae\061\uffae\062\302\063\uffae\064" +
    "\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae" +
    "\073\uffae\074\uffae\001\002\000\006\026\305\061\306\001" +
    "\002\000\052\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\016\uffab\027\uffab\061\uffab\062\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab" +
    "\073\uffab\074\uffab\001\002\000\050\003\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\016\uffc4\027\uffc4\061\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071" +
    "\uffc4\072\uffc4\073\uffc4\074\uffc4\001\002\000\046\003\265" +
    "\004\035\005\020\006\022\007\024\010\246\016\262\061" +
    "\271\063\245\064\252\065\267\066\263\067\260\070\251" +
    "\071\256\072\264\073\247\074\255\001\002\000\004\024" +
    "\307\001\002\000\026\012\100\016\102\017\104\020\105" +
    "\021\077\022\101\023\103\024\074\037\063\047\072\001" +
    "\002\000\012\025\311\045\124\046\122\051\123\001\002" +
    "\000\004\026\312\001\002\000\046\003\265\004\035\005" +
    "\020\006\022\007\024\010\246\016\262\061\271\063\245" +
    "\064\252\065\267\066\263\067\260\070\251\071\256\072" +
    "\264\073\247\074\255\001\002\000\050\003\265\004\035" +
    "\005\020\006\022\007\024\010\246\016\262\027\314\061" +
    "\271\063\245\064\252\065\267\066\263\067\260\070\251" +
    "\071\256\072\264\073\247\074\255\001\002\000\052\003" +
    "\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\016\uffaa" +
    "\027\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa" +
    "\001\002\000\050\003\265\004\035\005\020\006\022\007" +
    "\024\010\246\016\262\027\316\061\271\063\245\064\252" +
    "\065\267\066\263\067\260\070\251\071\256\072\264\073" +
    "\247\074\255\001\002\000\052\003\uffa9\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\016\uffa9\027\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\074\uffa9\001\002\000\052\003" +
    "\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\016\uffac" +
    "\027\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac" +
    "\001\002\000\050\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\016\uffc1\027\uffc1\061\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073" +
    "\uffc1\074\uffc1\001\002\000\050\003\uffb0\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\016\uffb0\027\uffb0\061\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0" +
    "\072\uffb0\073\uffb0\074\uffb0\001\002\000\050\003\uffaf\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\016\uffaf\027\uffaf" +
    "\061\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\001\002\000\026" +
    "\012\100\016\102\017\104\020\105\021\077\022\101\023" +
    "\103\024\074\037\063\047\072\001\002\000\012\032\325" +
    "\045\124\046\122\051\123\001\002\000\026\012\100\016" +
    "\102\017\104\020\105\021\077\022\101\023\103\024\074" +
    "\037\063\047\072\001\002\000\012\032\327\045\124\046" +
    "\122\051\123\001\002\000\004\023\330\001\002\000\004" +
    "\032\331\001\002\000\026\012\100\016\102\017\104\020" +
    "\105\021\077\022\101\023\103\024\074\037\063\047\072" +
    "\001\002\000\012\032\333\045\124\046\122\051\123\001" +
    "\002\000\026\012\100\016\102\017\104\020\105\021\077" +
    "\022\101\023\103\024\074\037\063\047\072\001\002\000" +
    "\012\025\335\045\124\046\122\051\123\001\002\000\004" +
    "\035\336\001\002\000\050\003\uffb5\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\016\uffb5\027\uffb5\061\uffb5\063\uffb5" +
    "\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\074\uffb5\001\002\000\050\003\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\016\uffc0\027\uffc0\061" +
    "\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0" +
    "\071\uffc0\072\uffc0\073\uffc0\074\uffc0\001\002\000\004\035" +
    "\342\001\002\000\012\035\uffa3\045\124\046\122\051\123" +
    "\001\002\000\050\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\016\uffbf\027\uffbf\061\uffbf\063\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073" +
    "\uffbf\074\uffbf\001\002\000\026\012\100\016\102\017\104" +
    "\020\105\021\077\022\101\023\103\024\074\037\063\047" +
    "\072\001\002\000\012\032\345\045\124\046\122\051\123" +
    "\001\002\000\026\012\100\016\102\017\104\020\105\021" +
    "\077\022\101\023\103\024\074\037\063\047\072\001\002" +
    "\000\012\032\347\045\124\046\122\051\123\001\002\000" +
    "\004\023\350\001\002\000\004\032\351\001\002\000\026" +
    "\012\100\016\102\017\104\020\105\021\077\022\101\023" +
    "\103\024\074\037\063\047\072\001\002\000\012\025\353" +
    "\045\124\046\122\051\123\001\002\000\004\035\354\001" +
    "\002\000\050\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\016\uffb6\027\uffb6\061\uffb6\063\uffb6\064\uffb6\065" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\001\002\000\026\012\100\016\102\017\104\020" +
    "\105\021\077\022\101\023\103\024\074\037\063\047\072" +
    "\001\002\000\012\032\357\045\124\046\122\051\123\001" +
    "\002\000\026\012\100\016\102\017\104\020\105\021\077" +
    "\022\101\023\103\024\074\037\063\047\072\001\002\000" +
    "\012\032\361\045\124\046\122\051\123\001\002\000\026" +
    "\012\100\016\102\017\104\020\105\021\077\022\101\023" +
    "\103\024\074\037\063\047\072\001\002\000\012\032\363" +
    "\045\124\046\122\051\123\001\002\000\026\012\100\016" +
    "\102\017\104\020\105\021\077\022\101\023\103\024\074" +
    "\037\063\047\072\001\002\000\012\032\365\045\124\046" +
    "\122\051\123\001\002\000\004\023\366\001\002\000\004" +
    "\032\367\001\002\000\026\012\100\016\102\017\104\020" +
    "\105\021\077\022\101\023\103\024\074\037\063\047\072" +
    "\001\002\000\012\025\371\045\124\046\122\051\123\001" +
    "\002\000\004\035\372\001\002\000\050\003\uffb2\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\016\uffb2\027\uffb2\061" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2" +
    "\071\uffb2\072\uffb2\073\uffb2\074\uffb2\001\002\000\026\002" +
    "\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\015\ufff7\016\ufff7\001\002\000\026\012\100\016" +
    "\102\017\104\020\105\021\077\022\101\023\103\024\074" +
    "\037\063\047\072\001\002\000\012\025\376\045\124\046" +
    "\122\051\123\001\002\000\004\026\377\001\002\000\046" +
    "\003\265\004\035\005\020\006\022\007\024\010\246\016" +
    "\262\061\271\063\245\064\252\065\267\066\263\067\260" +
    "\070\251\071\256\072\264\073\247\074\255\001\002\000" +
    "\050\003\265\004\035\005\020\006\022\007\024\010\246" +
    "\016\262\027\u0101\061\271\063\245\064\252\065\267\066" +
    "\263\067\260\070\251\071\256\072\264\073\247\074\255" +
    "\001\002\000\050\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\016\uffc3\027\uffc3\061\uffc3\063\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073" +
    "\uffc3\074\uffc3\001\002\000\026\012\100\016\102\017\104" +
    "\020\105\021\077\022\101\023\103\024\074\037\063\047" +
    "\072\001\002\000\012\025\u0104\045\124\046\122\051\123" +
    "\001\002\000\004\035\u0105\001\002\000\050\003\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\016\uffbe\027\uffbe" +
    "\061\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\001\002\000\050" +
    "\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\016" +
    "\uffbd\027\uffbd\061\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\001" +
    "\002\000\026\012\100\016\102\017\104\020\105\021\077" +
    "\022\101\023\103\024\074\037\063\047\072\001\002\000" +
    "\012\032\u0109\045\124\046\122\051\123\001\002\000\026" +
    "\012\100\016\102\017\104\020\105\021\077\022\101\023" +
    "\103\024\074\037\063\047\072\001\002\000\012\032\u010b" +
    "\045\124\046\122\051\123\001\002\000\004\023\u010c\001" +
    "\002\000\004\032\u010d\001\002\000\026\012\100\016\102" +
    "\017\104\020\105\021\077\022\101\023\103\024\074\037" +
    "\063\047\072\001\002\000\012\032\u010f\045\124\046\122" +
    "\051\123\001\002\000\026\012\100\016\102\017\104\020" +
    "\105\021\077\022\101\023\103\024\074\037\063\047\072" +
    "\001\002\000\012\025\u0111\045\124\046\122\051\123\001" +
    "\002\000\004\035\u0112\001\002\000\050\003\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\016\uffb4\027\uffb4\061" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\001\002\000\026\012" +
    "\100\016\102\017\104\020\105\021\077\022\101\023\103" +
    "\024\074\037\063\047\072\001\002\000\012\032\u0115\045" +
    "\124\046\122\051\123\001\002\000\026\012\100\016\102" +
    "\017\104\020\105\021\077\022\101\023\103\024\074\037" +
    "\063\047\072\001\002\000\012\032\u0117\045\124\046\122" +
    "\051\123\001\002\000\004\023\u0118\001\002\000\004\032" +
    "\u0119\001\002\000\026\012\100\016\102\017\104\020\105" +
    "\021\077\022\101\023\103\024\074\037\063\047\072\001" +
    "\002\000\012\025\u011b\045\124\046\122\051\123\001\002" +
    "\000\004\035\u011c\001\002\000\050\003\uffb3\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\016\uffb3\027\uffb3\061\uffb3" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\001\002\000\010\004\u011f" +
    "\005\u011e\016\u0121\001\002\000\004\016\u0130\001\002\000" +
    "\004\016\u012d\001\002\000\004\035\u0124\001\002\000\004" +
    "\050\u0122\001\002\000\026\012\100\016\102\017\104\020" +
    "\105\021\077\022\101\023\103\024\074\037\063\047\072" +
    "\001\002\000\012\035\uffa6\045\124\046\122\051\123\001" +
    "\002\000\026\012\100\016\102\017\104\020\105\021\077" +
    "\022\101\023\103\024\074\037\063\047\072\001\002\000" +
    "\012\035\u0126\045\124\046\122\051\123\001\002\000\004" +
    "\016\u0128\001\002\000\004\025\u0129\001\002\000\006\043" +
    "\110\044\112\001\002\000\004\026\u012a\001\002\000\046" +
    "\003\265\004\035\005\020\006\022\007\024\010\246\016" +
    "\262\061\271\063\245\064\252\065\267\066\263\067\260" +
    "\070\251\071\256\072\264\073\247\074\255\001\002\000" +
    "\050\003\265\004\035\005\020\006\022\007\024\010\246" +
    "\016\262\027\u012c\061\271\063\245\064\252\065\267\066" +
    "\263\067\260\070\251\071\256\072\264\073\247\074\255" +
    "\001\002\000\050\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\016\uffc2\027\uffc2\061\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073" +
    "\uffc2\074\uffc2\001\002\000\004\050\u012e\001\002\000\026" +
    "\012\100\016\102\017\104\020\105\021\077\022\101\023" +
    "\103\024\074\037\063\047\072\001\002\000\012\035\uffa8" +
    "\045\124\046\122\051\123\001\002\000\004\050\u0131\001" +
    "\002\000\026\012\100\016\102\017\104\020\105\021\077" +
    "\022\101\023\103\024\074\037\063\047\072\001\002\000" +
    "\012\035\uffa7\045\124\046\122\051\123\001\002\000\050" +
    "\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\016" +
    "\uffb1\027\uffb1\061\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\001" +
    "\002\000\006\025\uffc7\032\uffc7\001\002\000\016\004\035" +
    "\005\020\006\022\007\024\010\017\016\044\001\002\000" +
    "\004\016\u0137\001\002\000\006\025\uffc8\032\uffc8\001\002" +
    "\000\004\024\u0140\001\002\000\004\024\u013a\001\002\000" +
    "\020\004\035\005\020\006\022\007\024\010\017\016\044" +
    "\025\uffc9\001\002\000\004\025\u013c\001\002\000\004\026" +
    "\u013d\001\002\000\046\003\265\004\035\005\020\006\022" +
    "\007\024\010\246\016\262\061\271\063\245\064\252\065" +
    "\267\066\263\067\260\070\251\071\256\072\264\073\247" +
    "\074\255\001\002\000\050\003\265\004\035\005\020\006" +
    "\022\007\024\010\246\016\262\027\u013f\061\271\063\245" +
    "\064\252\065\267\066\263\067\260\070\251\071\256\072" +
    "\264\073\247\074\255\001\002\000\026\002\ufff8\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\015" +
    "\ufff8\016\ufff8\001\002\000\004\025\u0141\001\002\000\004" +
    "\026\u0142\001\002\000\046\003\265\004\035\005\020\006" +
    "\022\007\024\010\246\016\262\061\271\063\245\064\252" +
    "\065\267\066\263\067\260\070\251\071\256\072\264\073" +
    "\247\074\255\001\002\000\050\003\265\004\035\005\020" +
    "\006\022\007\024\010\246\016\262\027\u0144\061\271\063" +
    "\245\064\252\065\267\066\263\067\260\070\251\071\256" +
    "\072\264\073\247\074\255\001\002\000\026\002\ufff6\003" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6" +
    "\015\ufff6\016\ufff6\001\002\000\026\002\uffff\003\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\015\uffff" +
    "\016\uffff\001\002\000\004\024\u0147\001\002\000\004\023" +
    "\u0148\001\002\000\004\025\u0149\001\002\000\004\035\u014a" +
    "\001\002\000\026\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\014\ufffb\015\ufffb\016\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\010\002\006\003\004\004\003\001\001\000" +
    "\002\001\001\000\024\005\020\007\025\011\024\031\035" +
    "\032\015\033\027\034\033\046\026\047\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\u0144\011\024\031\035\032" +
    "\015\033\027\034\033\046\026\047\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\046\020\045\030\042\031\047\032\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\046\030\177\031\047\032\044\001\001" +
    "\000\004\023\050\001\001\000\002\001\001\000\004\021" +
    "\172\001\001\000\004\024\053\001\001\000\014\014\167" +
    "\015\067\016\063\017\065\037\061\001\001\000\004\022" +
    "\054\001\001\000\002\001\001\000\014\014\164\015\067" +
    "\016\063\017\065\037\061\001\001\000\004\025\060\001" +
    "\001\000\026\012\075\014\074\015\067\016\063\017\065" +
    "\025\072\026\064\027\066\037\061\043\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\163\015\067" +
    "\016\063\017\065\037\061\001\001\000\004\042\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\133\015" +
    "\067\016\063\017\065\037\061\001\001\000\002\001\001" +
    "\000\014\014\131\015\067\016\063\017\065\037\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\115\014\074\015\067\016" +
    "\063\017\065\037\061\043\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\120\001\001\000\002\001" +
    "\001\000\012\015\130\016\063\017\065\037\061\001\001" +
    "\000\014\014\125\015\067\016\063\017\065\037\061\001" +
    "\001\000\012\015\124\016\063\017\065\037\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\127\015" +
    "\067\016\063\017\065\037\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\135\015\067\016\063\017\065" +
    "\037\061\001\001\000\002\001\001\000\004\025\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\162\017\065\037\061\001\001\000\010\016" +
    "\161\017\065\037\061\001\001\000\002\001\001\000\010" +
    "\016\160\017\065\037\061\001\001\000\010\016\157\017" +
    "\065\037\061\001\001\000\010\016\156\017\065\037\061" +
    "\001\001\000\010\016\155\017\065\037\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\174\015\067\016" +
    "\063\017\065\037\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\204" +
    "\015\067\016\063\017\065\037\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\210" +
    "\015\067\016\063\017\065\037\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\213\001\001\000\002" +
    "\001\001\000\014\014\215\015\067\016\063\017\065\037" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\220\015\067\016\063\017\065\037\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\223\001\001" +
    "\000\002\001\001\000\014\014\225\015\067\016\063\017" +
    "\065\037\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\230\015\067\016\063\017\065\037\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\053" +
    "\001\001\000\010\011\235\013\236\044\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\252\010\253\011\046\017\247\031" +
    "\267\032\243\033\260\034\265\037\241\046\256\047\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\010\277\011\046\017\247\031\267\032\243\033\260" +
    "\034\265\037\241\046\256\047\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\340\015\067\016\063\017\065\036\337\037" +
    "\061\001\001\000\002\001\001\000\004\024\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\272\015\067\016\063\017\065\037" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\275\010\253\011\046\017\247\031\267\032\243\033" +
    "\260\034\265\037\241\046\256\047\242\001\001\000\026" +
    "\010\277\011\046\017\247\031\267\032\243\033\260\034" +
    "\265\037\241\046\256\047\242\001\001\000\010\040\303" +
    "\041\302\045\300\001\001\000\002\001\001\000\004\041" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\314\010\253\011\046\017\247\031" +
    "\267\032\243\033\260\034\265\037\241\046\256\047\242" +
    "\001\001\000\002\001\001\000\014\014\307\015\067\016" +
    "\063\017\065\037\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\312\010\253\011\046\017\247\031" +
    "\267\032\243\033\260\034\265\037\241\046\256\047\242" +
    "\001\001\000\026\010\277\011\046\017\247\031\267\032" +
    "\243\033\260\034\265\037\241\046\256\047\242\001\001" +
    "\000\002\001\001\000\026\010\277\011\046\017\247\031" +
    "\267\032\243\033\260\034\265\037\241\046\256\047\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\323" +
    "\015\067\016\063\017\065\037\061\001\001\000\002\001" +
    "\001\000\014\014\325\015\067\016\063\017\065\037\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\331\015\067\016\063\017\065\037\061" +
    "\001\001\000\002\001\001\000\014\014\333\015\067\016" +
    "\063\017\065\037\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\343" +
    "\015\067\016\063\017\065\037\061\001\001\000\002\001" +
    "\001\000\014\014\345\015\067\016\063\017\065\037\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\351\015\067\016\063\017\065\037\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\355\015\067\016\063\017\065\037\061" +
    "\001\001\000\002\001\001\000\014\014\357\015\067\016" +
    "\063\017\065\037\061\001\001\000\002\001\001\000\014" +
    "\014\361\015\067\016\063\017\065\037\061\001\001\000" +
    "\002\001\001\000\014\014\363\015\067\016\063\017\065" +
    "\037\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\367\015\067\016\063\017\065" +
    "\037\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\374\015\067" +
    "\016\063\017\065\037\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\377\010\253\011\046\017\247" +
    "\031\267\032\243\033\260\034\265\037\241\046\256\047" +
    "\242\001\001\000\026\010\277\011\046\017\247\031\267" +
    "\032\243\033\260\034\265\037\241\046\256\047\242\001" +
    "\001\000\002\001\001\000\014\014\u0102\015\067\016\063" +
    "\017\065\037\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\u0107" +
    "\015\067\016\063\017\065\037\061\001\001\000\002\001" +
    "\001\000\014\014\u0109\015\067\016\063\017\065\037\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\u010d\015\067\016\063\017\065\037\061" +
    "\001\001\000\002\001\001\000\014\014\u010f\015\067\016" +
    "\063\017\065\037\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\u0113\015\067\016" +
    "\063\017\065\037\061\001\001\000\002\001\001\000\014" +
    "\014\u0115\015\067\016\063\017\065\037\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\u0119\015\067\016\063\017\065\037\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\u011f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\u0122\015\067" +
    "\016\063\017\065\037\061\001\001\000\002\001\001\000" +
    "\014\014\u0124\015\067\016\063\017\065\037\061\001\001" +
    "\000\002\001\001\000\004\017\u0126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\u012a" +
    "\010\253\011\046\017\247\031\267\032\243\033\260\034" +
    "\265\037\241\046\256\047\242\001\001\000\026\010\277" +
    "\011\046\017\247\031\267\032\243\033\260\034\265\037" +
    "\241\046\256\047\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\u012e\015\067\016\063\017\065\037" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\u0131\015\067\016\063\017\065\037\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\235\013\u013a" +
    "\044\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\006\u013d\010\253\011\046\017\247\031\267\032\243" +
    "\033\260\034\265\037\241\046\256\047\242\001\001\000" +
    "\026\010\277\011\046\017\247\031\267\032\243\033\260" +
    "\034\265\037\241\046\256\047\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\u0142" +
    "\010\253\011\046\017\247\031\267\032\243\033\260\034" +
    "\265\037\241\046\256\047\242\001\001\000\026\010\277" +
    "\011\046\017\247\031\267\032\243\033\260\034\265\037" +
    "\241\046\256\047\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Par_Dplus$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Par_Dplus$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Par_Dplus$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public Nodo raiz;
    public String nombreArch;
    
public void syntax_error(Symbol s){
        String error="ERROR SINTACTICO RECUPERABLE: Se esperava otro token en lugar de ->  "+s.value+ "  L: "+(s.left+1)+" C: "+(s.right+1)+ " DOC: "+nombreArch;
        InterfazD.listaErrores.add(error);
        System.out.println(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String error="ERROR SINTACTICO NO RECUPERABLE: Se esperava otro token en lugar de ->  "+s.value+"  L: "+(s.left+1)+" C: "+(s.right+1)+ " DOC: "+nombreArch;
        InterfazD.listaErrores.add(error);
        System.out.println(error);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Par_Dplus$actions {

//Codigo de usuario
    String tmp="";

  private final Par_Dplus parser;

  /** Constructor */
  CUP$Par_Dplus$actions(Par_Dplus parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Par_Dplus$do_action_part00000000(
    int                        CUP$Par_Dplus$act_num,
    java_cup.runtime.lr_parser CUP$Par_Dplus$parser,
    java.util.Stack            CUP$Par_Dplus$stack,
    int                        CUP$Par_Dplus$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Par_Dplus$result;

      /* select the action based on the action number */
      switch (CUP$Par_Dplus$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		RESULT = start_val;
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Par_Dplus$parser.done_parsing();
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPOR CUERPO 
            {
              Nodo RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo imp = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    raiz = new Nodo(Cadena.INICIO);
                    raiz.Hijos.add(imp);
                    raiz.Hijos.add(cue);
                    System.out.println("===========================Analisis Correcto==============================");
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO CUE 
            {
              Nodo RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo cu = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    cu.Hijos.add(cue);
                    RESULT = cu;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= CUE 
            {
              Nodo RESULT =null;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.CUERPO);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPOR ::= IMPO 
            {
              Nodo RESULT =null;
		int impoleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int imporight = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo impo = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = impo;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("IMPOR",1, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPOR ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(Cadena.IMPORT);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("IMPOR",1, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPO ::= IMPO impor PAR_A cad PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).right;
		Nodo im = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		
                    im.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                    RESULT = im;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("IMPO",2, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPO ::= impor PAR_A cad PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		
                    RESULT = new Nodo(Cadena.IMPORT);
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("IMPO",2, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUE ::= struct id LLAV_A L_DEC LLAV_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.STRUCT);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(dec);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUE ::= vacio id PAR_A L_PAR PAR_C LLAV_A CUERPO2 LLAV_C 
            {
              Nodo RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.DEC_MET);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(lpar);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUE ::= TIPO id PAR_A L_PAR PAR_C LLAV_A CUERPO2 LLAV_C 
            {
              Nodo RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).right;
		Nodo tip = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Nodo lpar = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.DEC_FUN);
                    RESULT.Hijos.add(tip);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(lpar);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUE ::= vacio principal PAR_A PAR_C LLAV_A CUERPO2 LLAV_C 
            {
              Nodo RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).left;
		int priright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.PRINCIPAL);
                    RESULT.Hijos.add(new Nodo(pri,(Object)pri,prileft+1,priright+1));
                    RESULT.Hijos.add(cue);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUE ::= DA_VAR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT=da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUE ::= AS_VAR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT=da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUE ::= DA_ARR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT=da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUE ::= AS_ARR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT=da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUE ::= AS_VAR_EST 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT=da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUE ::= AS_ARR_EST 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT=da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUE ::= error PYCOMA 
            {
              Nodo RESULT =null;

              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUE ::= error LLAV_C 
            {
              Nodo RESULT =null;

              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE",5, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DA_VAR ::= TIPO L_ID RES PYCOMA 
            {
              Nodo RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Nodo tip = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo res = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.DA_VAR);
                    RESULT.Hijos.add(tip);
                    RESULT.Hijos.add(lid);
                    RESULT.Hijos.add(res);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("DA_VAR",23, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AS_VAR ::= id ASIG LOG PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.AS_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("AS_VAR",25, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DA_ARR ::= TIPO id DIM RES2 PYCOMA 
            {
              Nodo RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Nodo tip = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo res = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.DA_ARR);
                    RESULT.Hijos.add(tip);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(dim);
                    RESULT.Hijos.add(res);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("DA_ARR",24, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AS_ARR ::= id DIM ASIG LOG PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.AS_ARR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(dim);
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("AS_ARR",26, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AS_ARR ::= id DIM PUNTO id ASIG LOG PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.AS_ARR2);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(dim);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide2,ide2left+1,ide2right+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("AS_ARR",26, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AS_ARR ::= id DIM PUNTO id DIM ASIG LOG PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int dim2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int dim2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Nodo dim2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.AS_ARR3);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(dim);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide2,ide2left+1,ide2right+1));
                    RESULT.Hijos.add(dim2);
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("AS_ARR",26, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AS_VAR_EST ::= id PUNTO id ASIG LOG PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.AS_VAR_EST);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide2,ide2left+1,ide2right+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("AS_VAR_EST",36, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AS_ARR_EST ::= id PUNTO id DIM ASIG LOG PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.AS_ARR_EST);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide2,ide2left+1,ide2right+1));
                    RESULT.Hijos.add(dim);
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("AS_ARR_EST",37, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= cadena 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO ::= booleano 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.booleano,(Object)ca,caleft+1,caright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= entero 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.entero,(Object)ca,caleft+1,caright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= decimal 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.decimal,(Object)ca,caleft+1,caright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO ::= caracter 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.caracter,(Object)ca,caleft+1,caright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO ::= id 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.id,(Object)ca,caleft+1,caright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RES ::= ASIG LOG 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.RES);
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("RES",15, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RES ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(Cadena.RES);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("RES",15, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RES2 ::= ASIG AS 
            {
              Nodo RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo as = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.RES2);
                    RESULT.Hijos.add(as);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("RES2",16, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RES2 ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(Cadena.RES2);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("RES2",16, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AS ::= LLAV_A AS2 LLAV_C 
            {
              Nodo RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo as = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT=as;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("AS",19, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AS2 ::= L_AS 
            {
              Nodo RESULT =null;
		int lasleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int lasright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo las = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT=las;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("AS2",20, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AS2 ::= L_EXP 
            {
              Nodo RESULT =null;
		int lesleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int lesright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo les = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT=les;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("AS2",20, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // L_AS ::= L_AS COMA AS 
            {
              Nodo RESULT =null;
		int lasleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int lasright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo las = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo as = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    las.Hijos.add(as);
                     RESULT = las;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_AS",21, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // L_AS ::= AS 
            {
              Nodo RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo as = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.L_AS);
                    RESULT.Hijos.add(as);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_AS",21, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DIM ::= DIM COR_A LOG COR_C 
            {
              Nodo RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    dim.Hijos.add(log);
                    RESULT = dim;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("DIM",18, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DIM ::= COR_A LOG COR_C 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT= new Nodo(Cadena.DIM);
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("DIM",18, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // L_DEC ::= L_DEC DECC 
            {
              Nodo RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo ld = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    ld.Hijos.add(dec);
                    RESULT = ld;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_DEC",14, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // L_DEC ::= DECC 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.L_DEC);
                    RESULT.Hijos.add(dec);                    
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_DEC",14, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECC ::= DA_VAR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("DECC",22, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECC ::= DA_ARR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("DECC",22, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // L_ID ::= L_ID COMA id 
            {
              Nodo RESULT =null;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo lid = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    lid.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT= lid;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_ID",17, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // L_ID ::= id 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.L_IDS);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_ID",17, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L_EXP ::= L_EXPP 
            {
              Nodo RESULT =null;
		int lexleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo lex = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = lex; 
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_EXP",8, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L_EXP ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(Cadena.L_EXP);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_EXP",8, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // L_EXPP ::= L_EXPP COMA LOG 
            {
              Nodo RESULT =null;
		int lesleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int lesright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo les = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    les.Hijos.add(log);
                    RESULT = les;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_EXPP",33, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L_EXPP ::= LOG 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.L_EXP);
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_EXPP",33, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L_PAR ::= L_PARR 
            {
              Nodo RESULT =null;
		int larleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int larright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo lar = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT=lar;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_PAR",9, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // L_PAR ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = RESULT = new Nodo(Cadena.L_PAR);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_PAR",9, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // L_PARR ::= L_PARR COMA TIPO id 
            {
              Nodo RESULT =null;
		int larleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int larright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Nodo lar = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo tip = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    Nodo PAR = new Nodo(Cadena.PAR);
                    PAR.Hijos.add(tip);
                    PAR.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    lar.Hijos.add(PAR);
                    RESULT = lar;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_PARR",34, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // L_PARR ::= TIPO id 
            {
              Nodo RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo tip = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.L_PAR);
                    Nodo PAR = new Nodo(Cadena.PAR);
                    PAR.Hijos.add(tip);
                    PAR.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(PAR);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("L_PARR",34, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUERPO2 ::= CUERPO2 CUE2 
            {
              Nodo RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo cu = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    cu.Hijos.add(cue);
                    RESULT = cu;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUERPO2",4, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUERPO2 ::= CUE2 
            {
              Nodo RESULT =null;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.CUERPO2);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUERPO2",4, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUE2 ::= si PAR_A LOG PAR_C LLAV_A CUERPO2 LLAV_C SIN 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-5)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int sinleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int sinright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo sin = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.SI);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(cue);
                    RESULT.Hijos.add(sin);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CUE2 ::= mientras PAR_A LOG PAR_C LLAV_A CUERPO2 LLAV_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.MIENTRAS);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUE2 ::= para PAR_A DAS PYCOMA LOG PYCOMA OP PAR_C LLAV_A CUERPO2 LLAV_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.PARA);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(da);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(op);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUE2 ::= detener PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.DETENER);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUE2 ::= continuar PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.CONTINUAR);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUE2 ::= retornar RET PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo re = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.RETORNAR);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(re);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUE2 ::= imprimir PAR_A LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		
                    RESULT = new Nodo(Cadena.IMPRIMIR);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUE2 ::= OP PYCOMA 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = op;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CUE2 ::= AS_VAR_EST 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CUE2 ::= AS_ARR_EST 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CUE2 ::= DA_VAR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CUE2 ::= AS_VAR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUE2 ::= DA_ARR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUE2 ::= AS_ARR 
            {
              Nodo RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = da;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CUE2 ::= punto PAR_A LOG COMA LOG COMA cad COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		
                    RESULT = new Nodo(Cadena.PUNTO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));                    
                    RESULT.Hijos.add(e1);                    
                    RESULT.Hijos.add(e2);
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                    RESULT.Hijos.add(e3);    
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CUE2 ::= cuadrado PAR_A LOG COMA LOG COMA cad COMA LOG COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo e4 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		
                    RESULT = new Nodo(Cadena.CUADRADO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                    RESULT.Hijos.add(e3);
                    RESULT.Hijos.add(e4);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CUE2 ::= ovalo PAR_A LOG COMA LOG COMA cad COMA LOG COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo e4 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		
                    RESULT = new Nodo(Cadena.OVALO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                    RESULT.Hijos.add(e3);
                    RESULT.Hijos.add(e4);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUE2 ::= cadena PAR_A LOG COMA LOG COMA cad COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int ca2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ca2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo ca2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		
                    RESULT = new Nodo(Cadena.CADENA);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                    RESULT.Hijos.add(ca2);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUE2 ::= linea PAR_A LOG COMA LOG COMA LOG COMA LOG COMA cad COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-14)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-14)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-14)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-12)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-10)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-8)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		Nodo e4 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo e5 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		
                    RESULT = new Nodo(Cadena.LINEA);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(e3);
                    RESULT.Hijos.add(e4);
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                    RESULT.Hijos.add(e5);                    
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-14)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CUE2 ::= LLAMADA PYCOMA 
            {
              Nodo RESULT =null;
		int llaleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int llaright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo lla = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = lla;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CUE2 ::= error PYCOMA 
            {
              Nodo RESULT =null;

              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CUE2 ::= error LLAV_C 
            {
              Nodo RESULT =null;

              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("CUE2",6, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SIN ::= SINOO 
            {
              Nodo RESULT =null;
		int sinleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int sinright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo sin = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = sin;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("SIN",30, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SIN ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(Cadena.SIN);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("SIN",30, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SINOO ::= SINOO SINO 
            {
              Nodo RESULT =null;
		int sinleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int sinright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo sin = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo sino = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    sin.Hijos.add(sino);
                    RESULT = sin;
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("SINOO",35, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SINOO ::= SINO 
            {
              Nodo RESULT =null;
		int sinleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int sinright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo sin = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.SIN);
                    RESULT.Hijos.add(sin);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("SINOO",35, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SINO ::= sino si PAR_A LOG PAR_C LLAV_A CUERPO2 LLAV_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-6)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.SINO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("SINO",31, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-7)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SINO ::= sino LLAV_A CUERPO2 LLAV_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT =  new Nodo(Cadena.SINO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(cue);    
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("SINO",31, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DAS ::= entero id ASIG LOG 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.DA_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.entero,(Object)ca,caleft+1,caright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    Nodo tmp= new Nodo(Cadena.RES);
                    tmp.Hijos.add(log);
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("DAS",27, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DAS ::= decimal id ASIG LOG 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.DA_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.decimal,(Object)ca,caleft+1,caright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    Nodo tmp= new Nodo(Cadena.RES);
                    tmp.Hijos.add(log);
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("DAS",27, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DAS ::= id ASIG LOG 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.AS_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("DAS",27, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP ::= id INC 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.OP);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.inc,(Object)ide2,ide2left+1,ide2right+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP ::= id DEC 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.OP);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.dec,(Object)ide2,ide2left+1,ide2right+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("OP",13, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RET ::= LOG 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.RET);
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("RET",28, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RET ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(Cadena.RET);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("RET",28, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LLAMADA ::= id PAR_A L_EXP PAR_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int lesleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int lesright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo les = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.LLAMADA);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(les);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("LLAMADA",29, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOG ::= LOG OR REL 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(new Nodo(Cadena.or,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(rel);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("LOG",10, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOG ::= LOG AND REL 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(new Nodo(Cadena.or,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(rel);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("LOG",10, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOG ::= LOG PREG LOG DPUNTOS LOG 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo log2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int log3left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int log3right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log3 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(new Nodo("?",(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log2);
                    RESULT.Hijos.add(log3);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("LOG",10, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOG ::= REL 
            {
              Nodo RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(rel);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("LOG",10, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // REL ::= ARIT OP_REL ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo re = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.REL);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(re);
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("REL",11, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // REL ::= ARIT 
            {
              Nodo RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo ar = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.REL);
                    RESULT.Hijos.add(ar);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("REL",11, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_REL ::= IGUAL 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.igual,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("OP_REL",32, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_REL ::= DIFERENTE 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.diferente,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("OP_REL",32, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_REL ::= MAYOR 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.mayor,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("OP_REL",32, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_REL ::= MENOR 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.menor,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("OP_REL",32, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_REL ::= MAYOR_I 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.mayor_i,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("OP_REL",32, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_REL ::= MENOR_I 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.menor_i,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("OP_REL",32, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARIT ::= ARIT MAS ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.mas,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARIT ::= ARIT MENOS ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.menos,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARIT ::= ARIT POR ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.por,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARIT ::= ARIT DIV ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.div,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARIT ::= ARIT POT ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.pot,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ARIT ::= NOT LOG 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.not,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ARIT ::= MENOS LOG 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.menos,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ARIT ::= PAR_A LOG PAR_C 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(log);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ARIT ::= LLAMADA 
            {
              Nodo RESULT =null;
		int llaleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int llaright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo lla = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(lla); 
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ARIT ::= OP 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(op);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ARIT ::= id PUNTO id 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    Nodo tmp = new Nodo(Cadena.ACC_EST);
                    tmp.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    tmp.Hijos.add(new Nodo(Cadena.id,(Object)ide2,ide2left+1,ide2right+1));
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ARIT ::= id PUNTO id DIM 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    Nodo tmp = new Nodo(Cadena.ACC_MAT_EST);
                    tmp.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    tmp.Hijos.add(new Nodo(Cadena.id,(Object)ide2,ide2left+1,ide2right+1));
                    tmp.Hijos.add(dim);
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ARIT ::= id DIM 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    Nodo tmp = new Nodo(Cadena.ACC_MAT);
                    tmp.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    tmp.Hijos.add(dim);
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ARIT ::= id DIM PUNTO id 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-2)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    Nodo tmp = new Nodo(Cadena.ACC_MAT2);
                    tmp.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    tmp.Hijos.add(dim);
                    tmp.Hijos.add(new Nodo(Cadena.id,(Object)ide2,ide2left+1,ide2right+1));
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ARIT ::= id DIM PUNTO id DIM 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-3)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-1)).value;
		int dim2left = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int dim2right = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Nodo dim2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    Nodo tmp = new Nodo(Cadena.ACC_MAT3);
                    tmp.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    tmp.Hijos.add(dim);
                    tmp.Hijos.add(new Nodo(Cadena.id,(Object)ide2,ide2left+1,ide2right+1));
                    tmp.Hijos.add(dim2);    
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.elementAt(CUP$Par_Dplus$top-4)), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARIT ::= id 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ARIT ::= enter 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.entero,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARIT ::= decim 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.decimal,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARIT ::= bool 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.booleano,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARIT ::= carac 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.caracter,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARIT ::= cad 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ARIT ::= nulo 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_Dplus$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.nulo,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_Dplus$result = parser.getSymbolFactory().newSymbol("ARIT",12, ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_Dplus$stack.peek()), RESULT);
            }
          return CUP$Par_Dplus$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Par_Dplus$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Par_Dplus$do_action(
    int                        CUP$Par_Dplus$act_num,
    java_cup.runtime.lr_parser CUP$Par_Dplus$parser,
    java.util.Stack            CUP$Par_Dplus$stack,
    int                        CUP$Par_Dplus$top)
    throws java.lang.Exception
    {
              return CUP$Par_Dplus$do_action_part00000000(
                               CUP$Par_Dplus$act_num,
                               CUP$Par_Dplus$parser,
                               CUP$Par_Dplus$stack,
                               CUP$Par_Dplus$top);
    }
}

}
