package Dasm;

import AST.Nodo;
import draco_web.InterfazD;
import java_cup.runtime.Symbol;

//PARSER 
parser code
{://Codigo visible
    public Nodo raiz;
    public String nombreArch;
    
public void syntax_error(Symbol s){
        String error="ERROR SINTACTICO RECUPERABLE: Se esperava otro token en lugar de ->  "+s.value+ "  L: "+(s.left+1)+" C: "+(s.right+1)+ " DOC: "+nombreArch;
        //InterfazD.listaErrores.add(error);
        System.out.println(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String error="ERROR SINTACTICO NO RECUPERABLE: Se esperava otro token en lugar de ->  "+s.value+"  L: "+(s.left+1)+" C: "+(s.right+1)+ " DOC: "+nombreArch;
        //InterfazD.listaErrores.add(error);
        System.out.println(error);
    }

    


:}

action code
{://Codigo de usuario
    String tmp="";
:}


terminal String Add,Diff,Mul,Div,Mod,Call,Calc,Function,End,Eqz,Lt,Gt,Lte,Gte,And,Or,Not;
terminal id, enter,decim, Br_if,Br__if,Br,Print;
terminal DOLAR,DPUNTOS,MENOS,C,D,F;
terminal String get_local, set_local,get_global,set_global,tee_local,tee_global, point,quadrate,oval,line,string;



///////////////////////// NO TERMINALES --------------------------------------->

nonterminal Nodo  INICIO, L_SENT, SENT;
nonterminal Nodo  FUN, VAL;



start with INICIO;


INICIO ::= L_SENT:sen
                {:
                    raiz = new Nodo(Cadena.INICIO);
                    raiz.Hijos.add(sen);
                    System.out.println("===========================Analisis Correcto==============================");
                :}
;

L_SENT ::= L_SENT:sent SENT:sen
                {:
                    sent.Hijos.add(sen);
                    RESULT = sent;
                :}
        | SENT:sen
                {:
                    RESULT = new Nodo(Cadena.L_SENT);
                    RESULT.Hijos.add(sen);                    
                :}
;

 
SENT ::= id:ide DPUNTOS
                {:
                    RESULT = new Nodo(Cadena.Label,(Object)ide,ideleft+1,ideright+1);
                :} 
        
        | MENOS enter:ide
                {:
                    RESULT = new Nodo(Cadena.numero,"-"+(Object)ide,ideleft+1,ideright+1);
                :}
        | enter:ide
                {:
                    RESULT = new Nodo(Cadena.numero,(Object)ide,ideleft+1,ideright+1);
                :}
        | MENOS decim:ide
                {:
                    RESULT = new Nodo(Cadena.decimal,"-"+(Object)ide,ideleft+1,ideright+1);
                :}        
        | decim:ide
                {:
                    RESULT = new Nodo(Cadena.decimal,(Object)ide,ideleft+1,ideright+1);
                :}
        | Add:ide
                {:
                    RESULT = new Nodo(Cadena.Add,(Object)ide,ideleft+1,ideright+1);
                :}
        | Diff:ide
                {:
                    RESULT = new Nodo(Cadena.Diff,(Object)ide,ideleft+1,ideright+1);
                :}            
        | Mul:ide
                {:
                    RESULT = new Nodo(Cadena.Mul,(Object)ide,ideleft+1,ideright+1);
                :}
        | Div:ide
                {:
                    RESULT = new Nodo(Cadena.Div,(Object)ide,ideleft+1,ideright+1);
                :}
        | Mod:ide
                {:
                    RESULT = new Nodo(Cadena.Mod,(Object)ide,ideleft+1,ideright+1);
                :}
        | Call FUN:fu
                {:
                    RESULT = fu;
                :}
        | Function DOLAR id:ide L_SENT:sent End
                {:
                    RESULT = new Nodo(Cadena.FUNCTION);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(sent);
                :}
        | C:ide
                {:
                    RESULT = new Nodo(Cadena.C,(Object)ide,ideleft+1,ideright+1);
                :}
        | D:ide
                {:
                    RESULT = new Nodo(Cadena.D,(Object)ide,ideleft+1,ideright+1);
                :}
        | F:ide
                {:
                    RESULT = new Nodo(Cadena.F,(Object)ide,ideleft+1,ideright+1);
                :}
        | Eqz:ide
                {:
                    RESULT = new Nodo(Cadena.Eqz,(Object)ide,ideleft+1,ideright+1);
                :}
        | Lt:ide
                {:
                    RESULT = new Nodo(Cadena.Lt,(Object)ide,ideleft+1,ideright+1);
                :}
        | Gt:ide
                {:
                    RESULT = new Nodo(Cadena.Gt,(Object)ide,ideleft+1,ideright+1);
                :}
        | Lte:ide
                {:
                    RESULT = new Nodo(Cadena.Lte,(Object)ide,ideleft+1,ideright+1);
                :}
        | Gte:ide
                {:
                    RESULT = new Nodo(Cadena.Gte,(Object)ide,ideleft+1,ideright+1);
                :}
        | And:ide
                {:
                    RESULT = new Nodo(Cadena.And,(Object)ide,ideleft+1,ideright+1);
                :}
        | Or:ide
                {:
                    RESULT = new Nodo(Cadena.Or,(Object)ide,ideleft+1,ideright+1);
                :}
        | Not:ide
                {:
                    RESULT = new Nodo(Cadena.Not,(Object)ide,ideleft+1,ideright+1);
                :}
        | get_local VAL:val
                {:
                    RESULT = new Nodo(Cadena.GET_LOCAL);
                    RESULT.Hijos.add(val);
                :}
        | set_local VAL:val
                {:
                    RESULT = new Nodo(Cadena.SET_LOCAL);
                    RESULT.Hijos.add(val);
                :}
        | get_global VAL:val
                {:
                    RESULT = new Nodo(Cadena.GET_GLOBAL);
                    RESULT.Hijos.add(val);
                :}
        | set_global VAL:val
                {:
                    RESULT = new Nodo(Cadena.SET_GLOBAL);
                    RESULT.Hijos.add(val);
                :}
        | tee_local VAL:val
                {:
                    RESULT = new Nodo(Cadena.TEE_LOCAL);
                    RESULT.Hijos.add(val);
                :}
        | tee_global VAL:val
                {:
                    RESULT = new Nodo(Cadena.TEE_GLOBAL);
                    RESULT.Hijos.add(val);
                :}
        | Br_if id:ide
                {:
                    RESULT = new Nodo(Cadena.SALTO_SI);
                    RESULT.Hijos.add( new Nodo(Cadena.Label,(Object)ide,ideleft+1,ideright+1) );
                :}
        | Br__if id:ide
                {:
                    RESULT = new Nodo(Cadena.SALTO_SI2);
                    RESULT.Hijos.add( new Nodo(Cadena.Label,(Object)ide,ideleft+1,ideright+1) );
                :}        
        | Br id:ide
                {:
                    RESULT = new Nodo(Cadena.SALTO);
                    RESULT.Hijos.add( new Nodo(Cadena.Label,(Object)ide,ideleft+1,ideright+1) );
                :}
        | Print:ide
                {:
                   RESULT = new Nodo(Cadena.Print,(Object)ide,ideleft+1,ideright+1);
                :}
;

FUN ::= DOLAR id:ide
                {:
                    RESULT= new Nodo(Cadena.LLAMADA);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                :}
        | DOLAR point:ide
                {:
                    RESULT= new Nodo(Cadena.LLAMADA);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                :}
        | DOLAR quadrate:ide
                {:
                    RESULT= new Nodo(Cadena.CUADRADO);
                    RESULT.Hijos.add(new Nodo(Cadena.quadrate,(Object)ide,ideleft+1,ideright+1));
                :}
        | DOLAR oval:ide
                {:
                    RESULT= new Nodo(Cadena.OVALO);
                    RESULT.Hijos.add(new Nodo(Cadena.oval,(Object)ide,ideleft+1,ideright+1));
                :}
        | DOLAR line:ide
                {:
                    RESULT= new Nodo(Cadena.LINEA);
                    RESULT.Hijos.add(new Nodo(Cadena.line,(Object)ide,ideleft+1,ideright+1));
                :}
        | DOLAR string:ide
                {:
                    RESULT= new Nodo(Cadena.CADENA);
                    RESULT.Hijos.add(new Nodo(Cadena.string,(Object)ide,ideleft+1,ideright+1));
                :}
;

VAL ::= enter:ide
                {:
                    RESULT = new Nodo(Cadena.numero,(Object)ide,ideleft+1,ideright+1);
                :}
        | DOLAR Calc:ide
                {:
                    RESULT = new Nodo(Cadena.calc,(Object)ide,ideleft+1,ideright+1);
                :}
;

