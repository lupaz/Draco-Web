
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package DracoScript;

import AST.Nodo;
import draco_web.InterfazD;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Par_DS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Par_DS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Par_DS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Par_DS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\003\003\000\002\003\002" +
    "\000\002\004\010\000\002\004\007\000\002\007\005\000" +
    "\002\007\003\000\002\006\005\000\002\006\006\000\002" +
    "\006\012\000\002\006\011\000\002\006\015\000\002\006" +
    "\004\000\002\006\007\000\002\006\004\000\002\006\015" +
    "\000\002\006\017\000\002\006\017\000\002\006\015\000" +
    "\002\006\021\000\002\006\004\000\002\006\004\000\002" +
    "\010\006\000\002\010\004\000\002\015\004\000\002\015" +
    "\002\000\002\017\003\000\002\017\002\000\002\022\004" +
    "\000\002\022\003\000\002\020\011\000\002\020\006\000" +
    "\002\016\006\000\002\016\005\000\002\014\004\000\002" +
    "\014\004\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\004\000\002\013\004" +
    "\000\002\013\005\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\036\003\ufffc\004\ufffc\006\006\007\ufffc\044" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\001\002\000\036\003\ufffd\004" +
    "\ufffd\006\306\007\ufffd\044\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001" +
    "\002\000\034\003\033\004\035\007\021\044\024\047\036" +
    "\050\032\051\030\052\025\053\026\054\031\055\022\056" +
    "\034\057\023\001\002\000\004\014\011\001\002\000\004" +
    "\002\010\001\002\000\004\002\001\001\002\000\004\013" +
    "\012\001\002\000\006\015\ufff8\020\ufff8\001\002\000\006" +
    "\015\015\020\014\001\002\000\004\013\017\001\002\000" +
    "\004\021\016\001\002\000\036\003\ufffa\004\ufffa\006\ufffa" +
    "\007\ufffa\044\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\001\002\000\006" +
    "\015\ufff9\020\ufff9\001\002\000\004\021\305\001\002\000" +
    "\010\027\114\030\115\034\302\001\002\000\004\014\266" +
    "\001\002\000\004\014\254\001\002\000\004\014\227\001" +
    "\002\000\004\014\223\001\002\000\004\014\211\001\002" +
    "\000\036\002\000\003\033\004\035\007\021\044\024\047" +
    "\036\050\032\051\030\052\025\053\026\054\031\055\022" +
    "\056\034\057\023\001\002\000\004\021\210\001\002\000" +
    "\004\014\174\001\002\000\004\014\166\001\002\000\006" +
    "\017\165\021\164\001\002\000\004\014\146\001\002\000" +
    "\004\007\136\001\002\000\004\014\040\001\002\000\040" +
    "\002\ufffe\003\ufffe\004\ufffe\007\ufffe\017\ufffe\044\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\001\002\000\006\004\041\007\043\001" +
    "\002\000\004\007\132\001\002\000\004\021\120\001\002" +
    "\000\004\034\044\001\002\000\024\005\053\007\047\010" +
    "\052\011\051\012\057\013\054\014\046\023\050\033\056" +
    "\001\002\000\044\015\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\031\uffc6\032\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\001" +
    "\002\000\024\005\053\007\047\010\052\011\051\012\057" +
    "\013\054\014\046\023\050\033\056\001\002\000\050\015" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\114\030\115\031\uffc5\032\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\001\002" +
    "\000\024\005\053\007\047\010\052\011\051\012\057\013" +
    "\054\014\046\023\050\033\056\001\002\000\044\015\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\031\uffc3\032\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\001\002\000\044\015\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\031\uffc4\032\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\001\002\000\044\015\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\031" +
    "\uffc0\032\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\001\002\000\044\015\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\031\uffc1" +
    "\032\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\001\002\000\044\015\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\031\uffd8\032" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\001\002\000\024\005\053\007\047\010\052\011" +
    "\051\012\057\013\054\014\046\023\050\033\056\001\002" +
    "\000\044\015\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\031\uffc2\032\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\001\002\000" +
    "\044\015\uffd6\020\uffd6\021\uffd6\022\075\023\070\024\077" +
    "\025\074\026\072\031\uffd6\032\uffd6\035\073\036\076\037" +
    "\071\040\101\041\066\042\100\043\102\001\002\000\010" +
    "\021\uffdd\031\063\032\062\001\002\000\024\005\053\007" +
    "\047\010\052\011\051\012\057\013\054\014\046\023\050" +
    "\033\056\001\002\000\024\005\053\007\047\010\052\011" +
    "\051\012\057\013\054\014\046\023\050\033\056\001\002" +
    "\000\044\015\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\031\uffda\032\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\001\002\000" +
    "\044\015\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\031\uffd9\032\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\001\002\000\024" +
    "\005\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\023\uffd0\033\uffd0\001\002\000\024\005\053\007\047" +
    "\010\052\011\051\012\057\013\054\014\046\023\050\033" +
    "\056\001\002\000\024\005\053\007\047\010\052\011\051" +
    "\012\057\013\054\014\046\023\050\033\056\001\002\000" +
    "\024\005\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\023\uffd2\033\uffd2\001\002\000\024\005\053\007" +
    "\047\010\052\011\051\012\057\013\054\014\046\023\050" +
    "\033\056\001\002\000\024\005\053\007\047\010\052\011" +
    "\051\012\057\013\054\014\046\023\050\033\056\001\002" +
    "\000\024\005\053\007\047\010\052\011\051\012\057\013" +
    "\054\014\046\023\050\033\056\001\002\000\024\005\053" +
    "\007\047\010\052\011\051\012\057\013\054\014\046\023" +
    "\050\033\056\001\002\000\024\005\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\023\uffd3\033\uffd3\001" +
    "\002\000\024\005\053\007\047\010\052\011\051\012\057" +
    "\013\054\014\046\023\050\033\056\001\002\000\024\005" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\023\uffd5\033\uffd5\001\002\000\024\005\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\023\uffd1\033\uffd1" +
    "\001\002\000\024\005\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\023\uffd4\033\uffd4\001\002\000\044" +
    "\015\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\072\031\uffcc\032\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\001\002\000\044\015" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\077\025\074" +
    "\026\072\031\uffcf\032\uffcf\035\073\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\001\002\000\044\015\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\072\031\uffcd\032\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\001\002\000\044\015\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\072" +
    "\031\uffca\032\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\001\002\000\044\015\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\072\031" +
    "\uffcb\032\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\001\002\000\044\015\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\077\025\074\026\072\031\uffce" +
    "\032\uffce\035\073\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\001\002\000\044\015\uffd7\020\uffd7\021\uffd7" +
    "\022\075\023\070\024\077\025\074\026\072\031\uffd7\032" +
    "\uffd7\035\073\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\001\002\000\044\015\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\031\uffc9\032\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\001\002\000\044\015\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\031\uffc8\032\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\001\002\000\044\015\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\031\uffdc\032\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\001" +
    "\002\000\044\015\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\031\uffdb\032\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\001\002" +
    "\000\010\015\117\031\063\032\062\001\002\000\044\015" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\031\uffc7\032\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\001\002\000\024\005\053" +
    "\007\047\010\052\011\051\012\057\013\054\014\046\023" +
    "\050\033\056\001\002\000\010\021\122\031\063\032\062" +
    "\001\002\000\004\007\124\001\002\000\004\015\125\001" +
    "\002\000\006\027\114\030\115\001\002\000\004\016\126" +
    "\001\002\000\034\003\033\004\035\007\021\044\024\047" +
    "\036\050\032\051\030\052\025\053\026\054\031\055\022" +
    "\056\034\057\023\001\002\000\036\003\033\004\035\007" +
    "\021\017\130\044\024\047\036\050\032\051\030\052\025" +
    "\053\026\054\031\055\022\056\034\057\023\001\002\000" +
    "\040\002\ufff3\003\ufff3\004\ufff3\007\ufff3\017\ufff3\044\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\001\002\000\040\002\uffff\003\uffff" +
    "\004\uffff\007\uffff\017\uffff\044\uffff\047\uffff\050\uffff\051" +
    "\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff" +
    "\001\002\000\004\034\133\001\002\000\024\005\053\007" +
    "\047\010\052\011\051\012\057\013\054\014\046\023\050" +
    "\033\056\001\002\000\010\021\uffde\031\063\032\062\001" +
    "\002\000\006\020\142\021\143\001\002\000\010\020\uffe5" +
    "\021\uffe5\034\140\001\002\000\006\020\uffe7\021\uffe7\001" +
    "\002\000\024\005\053\007\047\010\052\011\051\012\057" +
    "\013\054\014\046\023\050\033\056\001\002\000\012\020" +
    "\uffe6\021\uffe6\031\063\032\062\001\002\000\004\007\144" +
    "\001\002\000\040\002\ufff7\003\ufff7\004\ufff7\007\ufff7\017" +
    "\ufff7\044\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\010\020" +
    "\uffe5\021\uffe5\034\140\001\002\000\006\020\uffe8\021\uffe8" +
    "\001\002\000\024\005\053\007\047\010\052\011\051\012" +
    "\057\013\054\014\046\023\050\033\056\001\002\000\010" +
    "\020\150\031\063\032\062\001\002\000\024\005\053\007" +
    "\047\010\052\011\051\012\057\013\054\014\046\023\050" +
    "\033\056\001\002\000\010\020\152\031\063\032\062\001" +
    "\002\000\024\005\053\007\047\010\052\011\051\012\057" +
    "\013\054\014\046\023\050\033\056\001\002\000\010\020" +
    "\154\031\063\032\062\001\002\000\024\005\053\007\047" +
    "\010\052\011\051\012\057\013\054\014\046\023\050\033" +
    "\056\001\002\000\010\020\156\031\063\032\062\001\002" +
    "\000\024\005\053\007\047\010\052\011\051\012\057\013" +
    "\054\014\046\023\050\033\056\001\002\000\010\020\160" +
    "\031\063\032\062\001\002\000\024\005\053\007\047\010" +
    "\052\011\051\012\057\013\054\014\046\023\050\033\056" +
    "\001\002\000\010\015\162\031\063\032\062\001\002\000" +
    "\004\021\163\001\002\000\040\002\uffeb\003\uffeb\004\uffeb" +
    "\007\uffeb\017\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\001\002" +
    "\000\040\002\uffea\003\uffea\004\uffea\007\uffea\017\uffea\044" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\001\002\000\040\002\uffe9\003" +
    "\uffe9\004\uffe9\007\uffe9\017\uffe9\044\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\001\002\000\024\005\053\007\047\010\052\011\051" +
    "\012\057\013\054\014\046\023\050\033\056\001\002\000" +
    "\010\015\170\031\063\032\062\001\002\000\004\016\171" +
    "\001\002\000\034\003\033\004\035\007\021\044\024\047" +
    "\036\050\032\051\030\052\025\053\026\054\031\055\022" +
    "\056\034\057\023\001\002\000\036\003\033\004\035\007" +
    "\021\017\173\044\024\047\036\050\032\051\030\052\025" +
    "\053\026\054\031\055\022\056\034\057\023\001\002\000" +
    "\040\002\ufff4\003\ufff4\004\ufff4\007\ufff4\017\ufff4\044\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\001\002\000\024\005\053\007\047" +
    "\010\052\011\051\012\057\013\054\014\046\023\050\033" +
    "\056\001\002\000\010\020\176\031\063\032\062\001\002" +
    "\000\024\005\053\007\047\010\052\011\051\012\057\013" +
    "\054\014\046\023\050\033\056\001\002\000\010\020\200" +
    "\031\063\032\062\001\002\000\024\005\053\007\047\010" +
    "\052\011\051\012\057\013\054\014\046\023\050\033\056" +
    "\001\002\000\010\020\202\031\063\032\062\001\002\000" +
    "\024\005\053\007\047\010\052\011\051\012\057\013\054" +
    "\014\046\023\050\033\056\001\002\000\010\020\204\031" +
    "\063\032\062\001\002\000\024\005\053\007\047\010\052" +
    "\011\051\012\057\013\054\014\046\023\050\033\056\001" +
    "\002\000\010\015\206\031\063\032\062\001\002\000\004" +
    "\021\207\001\002\000\040\002\uffee\003\uffee\004\uffee\007" +
    "\uffee\017\uffee\044\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\001\002\000" +
    "\040\002\ufff2\003\ufff2\004\ufff2\007\ufff2\017\ufff2\044\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\001\002\000\024\005\053\007\047" +
    "\010\052\011\051\012\057\013\054\014\046\023\050\033" +
    "\056\001\002\000\010\020\213\031\063\032\062\001\002" +
    "\000\024\005\053\007\047\010\052\011\051\012\057\013" +
    "\054\014\046\023\050\033\056\001\002\000\010\020\215" +
    "\031\063\032\062\001\002\000\024\005\053\007\047\010" +
    "\052\011\051\012\057\013\054\014\046\023\050\033\056" +
    "\001\002\000\010\020\217\031\063\032\062\001\002\000" +
    "\024\005\053\007\047\010\052\011\051\012\057\013\054" +
    "\014\046\023\050\033\056\001\002\000\010\015\221\031" +
    "\063\032\062\001\002\000\004\021\222\001\002\000\040" +
    "\002\uffef\003\uffef\004\uffef\007\uffef\017\uffef\044\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\001\002\000\024\005\053\007\047\010" +
    "\052\011\051\012\057\013\054\014\046\023\050\033\056" +
    "\001\002\000\010\015\225\031\063\032\062\001\002\000" +
    "\004\021\226\001\002\000\040\002\ufff1\003\ufff1\004\ufff1" +
    "\007\ufff1\017\ufff1\044\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\001\002" +
    "\000\024\005\053\007\047\010\052\011\051\012\057\013" +
    "\054\014\046\023\050\033\056\001\002\000\010\015\231" +
    "\031\063\032\062\001\002\000\004\016\232\001\002\000" +
    "\034\003\033\004\035\007\021\044\024\047\036\050\032" +
    "\051\030\052\025\053\026\054\031\055\022\056\034\057" +
    "\023\001\002\000\036\003\033\004\035\007\021\017\234" +
    "\044\024\047\036\050\032\051\030\052\025\053\026\054" +
    "\031\055\022\056\034\057\023\001\002\000\044\002\uffe3" +
    "\003\uffe3\004\uffe3\007\uffe3\017\uffe3\044\uffe3\045\236\046" +
    "\241\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\001\002\000\044\002\uffe4\003" +
    "\uffe4\004\uffe4\007\uffe4\017\uffe4\044\uffe4\045\236\046\241" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\001\002\000\004\016\250\001\002" +
    "\000\044\002\uffe1\003\uffe1\004\uffe1\007\uffe1\017\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000" +
    "\040\002\ufff5\003\ufff5\004\ufff5\007\ufff5\017\ufff5\044\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\057\ufff5\001\002\000\004\014\242\001\002" +
    "\000\024\005\053\007\047\010\052\011\051\012\057\013" +
    "\054\014\046\023\050\033\056\001\002\000\010\015\244" +
    "\031\063\032\062\001\002\000\004\016\245\001\002\000" +
    "\034\003\033\004\035\007\021\044\024\047\036\050\032" +
    "\051\030\052\025\053\026\054\031\055\022\056\034\057" +
    "\023\001\002\000\036\003\033\004\035\007\021\017\247" +
    "\044\024\047\036\050\032\051\030\052\025\053\026\054" +
    "\031\055\022\056\034\057\023\001\002\000\044\002\uffe0" +
    "\003\uffe0\004\uffe0\007\uffe0\017\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\001\002\000\034\003\033\004" +
    "\035\007\021\044\024\047\036\050\032\051\030\052\025" +
    "\053\026\054\031\055\022\056\034\057\023\001\002\000" +
    "\036\003\033\004\035\007\021\017\252\044\024\047\036" +
    "\050\032\051\030\052\025\053\026\054\031\055\022\056" +
    "\034\057\023\001\002\000\044\002\uffdf\003\uffdf\004\uffdf" +
    "\007\uffdf\017\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\001\002\000\044\002\uffe2\003\uffe2\004\uffe2\007" +
    "\uffe2\017\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\001\002\000\024\005\053\007\047\010\052\011\051" +
    "\012\057\013\054\014\046\023\050\033\056\001\002\000" +
    "\010\020\256\031\063\032\062\001\002\000\024\005\053" +
    "\007\047\010\052\011\051\012\057\013\054\014\046\023" +
    "\050\033\056\001\002\000\010\020\260\031\063\032\062" +
    "\001\002\000\024\005\053\007\047\010\052\011\051\012" +
    "\057\013\054\014\046\023\050\033\056\001\002\000\010" +
    "\020\262\031\063\032\062\001\002\000\024\005\053\007" +
    "\047\010\052\011\051\012\057\013\054\014\046\023\050" +
    "\033\056\001\002\000\010\015\264\031\063\032\062\001" +
    "\002\000\004\021\265\001\002\000\040\002\uffec\003\uffec" +
    "\004\uffec\007\uffec\017\uffec\044\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\001\002\000\024\005\053\007\047\010\052\011\051\012" +
    "\057\013\054\014\046\023\050\033\056\001\002\000\010" +
    "\020\270\031\063\032\062\001\002\000\024\005\053\007" +
    "\047\010\052\011\051\012\057\013\054\014\046\023\050" +
    "\033\056\001\002\000\010\020\272\031\063\032\062\001" +
    "\002\000\024\005\053\007\047\010\052\011\051\012\057" +
    "\013\054\014\046\023\050\033\056\001\002\000\010\020" +
    "\274\031\063\032\062\001\002\000\024\005\053\007\047" +
    "\010\052\011\051\012\057\013\054\014\046\023\050\033" +
    "\056\001\002\000\010\020\276\031\063\032\062\001\002" +
    "\000\024\005\053\007\047\010\052\011\051\012\057\013" +
    "\054\014\046\023\050\033\056\001\002\000\010\015\300" +
    "\031\063\032\062\001\002\000\004\021\301\001\002\000" +
    "\040\002\uffed\003\uffed\004\uffed\007\uffed\017\uffed\044\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\057\uffed\001\002\000\024\005\053\007\047" +
    "\010\052\011\051\012\057\013\054\014\046\023\050\033" +
    "\056\001\002\000\010\021\304\031\063\032\062\001\002" +
    "\000\040\002\ufff6\003\ufff6\004\ufff6\007\ufff6\017\ufff6\044" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\001\002\000\040\002\ufff0\003" +
    "\ufff0\004\ufff0\007\ufff0\017\ufff0\044\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\001\002\000\004\014\307\001\002\000\004\013\012" +
    "\001\002\000\006\015\311\020\014\001\002\000\004\021" +
    "\312\001\002\000\036\003\ufffb\004\ufffb\006\ufffb\007\ufffb" +
    "\044\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\010\002\006\003\004\004\003\001\001\000" +
    "\002\001\001\000\010\005\026\006\036\014\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\130\014\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\060\012\054\013\057\014\044\001\001\000" +
    "\002\001\001\000\012\011\115\012\054\013\057\014\044" +
    "\001\001\000\002\001\001\000\012\011\112\012\054\013" +
    "\057\014\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\111\012\054\013\057\014\044\001\001\000\002" +
    "\001\001\000\004\021\066\001\001\000\002\001\001\000" +
    "\010\012\064\013\057\014\044\001\001\000\010\012\063" +
    "\013\057\014\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\110\014\044\001\001" +
    "\000\006\013\107\014\044\001\001\000\002\001\001\000" +
    "\006\013\106\014\044\001\001\000\006\013\105\014\044" +
    "\001\001\000\006\013\104\014\044\001\001\000\006\013" +
    "\103\014\044\001\001\000\002\001\001\000\006\013\102" +
    "\014\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\120\012\054\013\057\014\044" +
    "\001\001\000\002\001\001\000\004\014\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\126\006\036\014\017\001\001\000\006\006\130\014" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\133\012\054\013\057\014\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\136" +
    "\001\001\000\002\001\001\000\012\011\140\012\054\013" +
    "\057\014\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\144\001\001\000\002\001" +
    "\001\000\012\011\146\012\054\013\057\014\044\001\001" +
    "\000\002\001\001\000\012\011\150\012\054\013\057\014" +
    "\044\001\001\000\002\001\001\000\012\011\152\012\054" +
    "\013\057\014\044\001\001\000\002\001\001\000\012\011" +
    "\154\012\054\013\057\014\044\001\001\000\002\001\001" +
    "\000\012\011\156\012\054\013\057\014\044\001\001\000" +
    "\002\001\001\000\012\011\160\012\054\013\057\014\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\166" +
    "\012\054\013\057\014\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\171\006\036\014\017\001\001" +
    "\000\006\006\130\014\017\001\001\000\002\001\001\000" +
    "\012\011\174\012\054\013\057\014\044\001\001\000\002" +
    "\001\001\000\012\011\176\012\054\013\057\014\044\001" +
    "\001\000\002\001\001\000\012\011\200\012\054\013\057" +
    "\014\044\001\001\000\002\001\001\000\012\011\202\012" +
    "\054\013\057\014\044\001\001\000\002\001\001\000\012" +
    "\011\204\012\054\013\057\014\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\211\012\054\013\057\014\044\001\001\000" +
    "\002\001\001\000\012\011\213\012\054\013\057\014\044" +
    "\001\001\000\002\001\001\000\012\011\215\012\054\013" +
    "\057\014\044\001\001\000\002\001\001\000\012\011\217" +
    "\012\054\013\057\014\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\223\012\054" +
    "\013\057\014\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\227\012\054\013\057" +
    "\014\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\232\006\036\014\017\001\001\000\006\006\130" +
    "\014\017\001\001\000\010\017\237\020\236\022\234\001" +
    "\001\000\004\020\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\242\012\054\013\057\014\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\245\006\036\014\017\001" +
    "\001\000\006\006\130\014\017\001\001\000\002\001\001" +
    "\000\010\005\250\006\036\014\017\001\001\000\006\006" +
    "\130\014\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\254\012\054\013\057\014\044\001\001\000" +
    "\002\001\001\000\012\011\256\012\054\013\057\014\044" +
    "\001\001\000\002\001\001\000\012\011\260\012\054\013" +
    "\057\014\044\001\001\000\002\001\001\000\012\011\262" +
    "\012\054\013\057\014\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\266\012\054" +
    "\013\057\014\044\001\001\000\002\001\001\000\012\011" +
    "\270\012\054\013\057\014\044\001\001\000\002\001\001" +
    "\000\012\011\272\012\054\013\057\014\044\001\001\000" +
    "\002\001\001\000\012\011\274\012\054\013\057\014\044" +
    "\001\001\000\002\001\001\000\012\011\276\012\054\013" +
    "\057\014\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\302\012\054\013\057\014" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Par_DS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Par_DS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Par_DS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    public Nodo raiz;
    public String nombreArch;
    
public void syntax_error(Symbol s){
        String error="ERROR SINTACTICO RECUPERABLE: Se esperava otro token en lugar de ->  "+s.value+ "  L: "+(s.left+1)+" C: "+(s.right+1)+ " DOC: "+nombreArch;
        InterfazD.listaErrores.add(error);
        System.out.println(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String error="ERROR SINTACTICO NO RECUPERABLE: Se esperava otro token en lugar de ->  "+s.value+"  L: "+(s.left+1)+" C: "+(s.right+1)+ " DOC: "+nombreArch;
        InterfazD.listaErrores.add(error);
        System.out.println(error);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Par_DS$actions {

//Codigo de usuario
    String tmp="";

  private final Par_DS parser;

  /** Constructor */
  CUP$Par_DS$actions(Par_DS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Par_DS$do_action_part00000000(
    int                        CUP$Par_DS$act_num,
    java_cup.runtime.lr_parser CUP$Par_DS$parser,
    java.util.Stack            CUP$Par_DS$stack,
    int                        CUP$Par_DS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Par_DS$result;

      /* select the action based on the action number */
      switch (CUP$Par_DS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		RESULT = start_val;
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Par_DS$parser.done_parsing();
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= RUN CUERPO 
            {
              Nodo RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo imp = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    raiz = new Nodo(Cadena.INICIO);
                    raiz.Hijos.add(imp);
                    raiz.Hijos.add(cue);
                    System.out.println("===========================Analisis Correcto==============================");
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CUERPO CUE 
            {
              Nodo RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo cu = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    cu.Hijos.add(cue);
                    RESULT = cu;
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= CUE 
            {
              Nodo RESULT =null;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.CUERPO);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RUN ::= RU 
            {
              Nodo RESULT =null;
		int impoleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int imporight = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo impo = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = impo;
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("RUN",1, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RUN ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(Cadena.RUN);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("RUN",1, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RU ::= RU run PAR_A L_ARC PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-5)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-5)).right;
		Nodo im = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-5)).value;
		int arsleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int arsright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ars = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		
                    im.Hijos.add(ars);
                    RESULT = im;
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("RU",2, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-5)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RU ::= run PAR_A L_ARC PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int arsleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int arsright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ars = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		
                    RESULT = new Nodo(Cadena.RUN);
                    RESULT.Hijos.add(ars);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("RU",2, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L_ARC ::= L_ARC COMA cad 
            {
              Nodo RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ar = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    ar.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                    RESULT = ar;
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("L_ARC",5, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_ARC ::= cad 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.L_ARC);
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("L_ARC",5, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUE ::= var L_VAR PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo lv = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		
                    RESULT= new Nodo(Cadena.DA_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(lv);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUE ::= id ASIG LOG PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		
                    RESULT= new Nodo(Cadena.AS_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUE ::= si PAR_A LOG PAR_C LLAV_A CUERPO LLAV_C SIN 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-7)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-7)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-7)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-5)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-5)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-5)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int sinleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int sinright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo sin = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.SI);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(cue);
                    RESULT.Hijos.add(sin);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-7)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUE ::= mientras PAR_A LOG PAR_C LLAV_A CUERPO LLAV_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		
                    RESULT = new Nodo(Cadena.MIENTRAS);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUE ::= para PAR_A DAS PYCOMA LOG PYCOMA OP PAR_C LLAV_A CUERPO LLAV_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).right;
		Nodo da = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		
                    RESULT = new Nodo(Cadena.PARA);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(da);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(op);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUE ::= detener PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		
                    RESULT = new Nodo(Cadena.DETENER);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUE ::= imprimir PAR_A LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		
                    RESULT = new Nodo(Cadena.IMPRIMIR);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUE ::= OP PYCOMA 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		
                    RESULT = op;
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUE ::= punto PAR_A LOG COMA LOG COMA LOG COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).right;
		Nodo ca = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		
                    RESULT = new Nodo(Cadena.PUNTO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));                    
                    RESULT.Hijos.add(e1);                    
                    RESULT.Hijos.add(e2);
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(e3);    
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUE ::= cuadrado PAR_A LOG COMA LOG COMA LOG COMA LOG COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).right;
		Nodo ca = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo e4 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		
                    RESULT = new Nodo(Cadena.CUADRADO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(e3);
                    RESULT.Hijos.add(e4);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUE ::= ovalo PAR_A LOG COMA LOG COMA LOG COMA LOG COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).right;
		Nodo ca = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo e4 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		
                    RESULT = new Nodo(Cadena.OVALO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(e3);
                    RESULT.Hijos.add(e4);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUE ::= cadena PAR_A LOG COMA LOG COMA LOG COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).right;
		Nodo ca = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).value;
		int ca2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ca2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ca2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		
                    RESULT = new Nodo(Cadena.CADENA);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(ca2);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUE ::= linea PAR_A LOG COMA LOG COMA LOG COMA LOG COMA LOG COMA LOG PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-14)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-14)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-14)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-12)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-10)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).right;
		Nodo e3 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-8)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).right;
		Nodo e4 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).right;
		Nodo ca = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo e5 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		
                    RESULT = new Nodo(Cadena.LINEA);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(e3);
                    RESULT.Hijos.add(e4);
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(e5);                    
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-14)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUE ::= error PYCOMA 
            {
              Nodo RESULT =null;

              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUE ::= error LLAV_C 
            {
              Nodo RESULT =null;

              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("CUE",4, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_VAR ::= L_VAR COMA id RES 
            {
              Nodo RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).right;
		Nodo lv = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo re = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    Nodo tmp= new Nodo(Cadena.VAR);
                    tmp.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    tmp.Hijos.add(re);
                    RESULT = lv;
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("L_VAR",6, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_VAR ::= id RES 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo re = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.L_VAR);
                    Nodo tmp= new Nodo(Cadena.VAR);
                    tmp.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    tmp.Hijos.add(re);
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("L_VAR",6, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RES ::= ASIG LOG 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.RES);
                    RESULT.Hijos.add(log);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("RES",11, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RES ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(Cadena.RES);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("RES",11, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIN ::= SINOO 
            {
              Nodo RESULT =null;
		int sinleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int sinright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo sin = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = sin;
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("SIN",13, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SIN ::= 
            {
              Nodo RESULT =null;
		
                    RESULT = new Nodo(Cadena.SIN);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("SIN",13, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SINOO ::= SINOO SINO 
            {
              Nodo RESULT =null;
		int sinleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int sinright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo sin = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo sino = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    sin.Hijos.add(sino);
                    RESULT = sin;
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("SINOO",16, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SINOO ::= SINO 
            {
              Nodo RESULT =null;
		int sinleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int sinright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo sin = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.SIN);
                    RESULT.Hijos.add(sin);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("SINOO",16, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SINO ::= sinosi PAR_A LOG PAR_C LLAV_A CUERPO LLAV_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-4)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		
                    RESULT = new Nodo(Cadena.SINO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(cue);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("SINO",14, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-6)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SINO ::= si_no LLAV_A CUERPO LLAV_C 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).value;
		int cueleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int cueright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo cue = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		
                    RESULT =  new Nodo(Cadena.SINO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(cue);    
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("SINO",14, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DAS ::= var id ASIG LOG 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.DA_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ca,caleft+1,caright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    Nodo tmp= new Nodo(Cadena.RES);
                    tmp.Hijos.add(log);
                    RESULT.Hijos.add(tmp);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("DAS",12, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-3)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DAS ::= id ASIG LOG 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.AS_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("DAS",12, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= id INC 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.OP);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.inc,(Object)ide2,ide2left+1,ide2right+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= id DEC 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT= new Nodo(Cadena.OP);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.dec,(Object)ide2,ide2left+1,ide2right+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("OP",10, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LOG ::= LOG OR REL 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(new Nodo(Cadena.or,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(rel);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("LOG",7, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LOG ::= LOG AND REL 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int relleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(new Nodo(Cadena.or,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(rel);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("LOG",7, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LOG ::= REL 
            {
              Nodo RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo rel = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(rel);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("LOG",7, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REL ::= ARIT OP_REL ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo re = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.REL);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(re);
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("REL",8, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REL ::= ARIT 
            {
              Nodo RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo ar = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.REL);
                    RESULT.Hijos.add(ar);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("REL",8, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP_REL ::= IGUAL 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.igual,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("OP_REL",15, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_REL ::= DIFERENTE 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.diferente,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("OP_REL",15, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_REL ::= MAYOR 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.mayor,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("OP_REL",15, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_REL ::= MENOR 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.menor,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("OP_REL",15, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_REL ::= MAYOR_I 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.mayor_i,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("OP_REL",15, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_REL ::= MENOR_I 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT  = new Nodo(Cadena.menor_i,(Object)ide,ideleft+1,ideright+1);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("OP_REL",15, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARIT ::= ARIT MAS ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.mas,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARIT ::= ARIT MENOS ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.menos,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARIT ::= ARIT POR ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.por,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARIT ::= ARIT DIV ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.div,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARIT ::= ARIT POT ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.pot,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARIT ::= ARIT MOD ARIT 
            {
              Nodo RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).right;
		Nodo ar1 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo ar2 = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.mod,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARIT ::= NOT LOG 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.not,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARIT ::= MENOS LOG 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.menos,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARIT ::= PAR_A LOG PAR_C 
            {
              Nodo RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).right;
		Nodo log = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-1)).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(log);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.elementAt(CUP$Par_DS$top-2)), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARIT ::= OP 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(op);
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARIT ::= id 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARIT ::= number 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.number,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARIT ::= bool 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.booleano,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARIT ::= carac 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.caracter,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARIT ::= cad 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARIT ::= nulo 
            {
              Nodo RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Par_DS$stack.peek()).value;
		
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.nulo,(Object)ide,ideleft+1,ideright+1));
                
              CUP$Par_DS$result = parser.getSymbolFactory().newSymbol("ARIT",9, ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Par_DS$stack.peek()), RESULT);
            }
          return CUP$Par_DS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Par_DS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Par_DS$do_action(
    int                        CUP$Par_DS$act_num,
    java_cup.runtime.lr_parser CUP$Par_DS$parser,
    java.util.Stack            CUP$Par_DS$stack,
    int                        CUP$Par_DS$top)
    throws java.lang.Exception
    {
              return CUP$Par_DS$do_action_part00000000(
                               CUP$Par_DS$act_num,
                               CUP$Par_DS$parser,
                               CUP$Par_DS$stack,
                               CUP$Par_DS$top);
    }
}

}
