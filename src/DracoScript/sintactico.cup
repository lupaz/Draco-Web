package DracoScript;

import AST.Nodo;
//import CJS.Ejecucion.Cadena;
import draco_web.InterfazD;
import java_cup.runtime.Symbol;

//PARSER 
parser code
{://Codigo visible
    public Nodo raiz;
    public String nombreArch;
    
public void syntax_error(Symbol s){
        String error="ERROR SINTACTICO RECUPERABLE: Se esperava otro token en lugar de ->  "+s.value+ "  L: "+(s.left+1)+" C: "+(s.right+1)+ " DOC: "+nombreArch;
        InterfazD.listaErrores.add(error);
        System.out.println(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String error="ERROR SINTACTICO NO RECUPERABLE: Se esperava otro token en lugar de ->  "+s.value+"  L: "+(s.left+1)+" C: "+(s.right+1)+ " DOC: "+nombreArch;
        InterfazD.listaErrores.add(error);
        System.out.println(error);
    }
:}

action code
{://Codigo de usuario
    String tmp="";
:}


terminal String var,nulo,run,id;
terminal number,bool,carac,cad;
terminal PAR_A, PAR_C, LLAV_A, LLAV_C, COMA, PYCOMA;
terminal MAS,MENOS,DIV,POR,POT,INC,DEC,OR,AND,NOT, ASIG,MOD;
terminal MAYOR,MENOR,MAYOR_I,MENOR_I,IGUAL,DIFERENTE;
terminal String si,si_no,sinosi,para,mientras,detener,imprimir,punto,cuadrado,ovalo,linea,cadena;



///////////////////////// NO TERMINALES --------------------------------------->

nonterminal Nodo  INICIO, RUN, RU, CUERPO, CUE, L_ARC, L_VAR, LOG, REL, ARIT;
nonterminal Nodo  OP, RES;
nonterminal Nodo  DAS, SIN,SINO,OP_REL, SINOO; 



//agregamos la precedencia
precedence left OR;
precedence left AND;
precedence nonassoc MAYOR,MENOR,MAYOR_I,MENOR_I,IGUAL,DIFERENTE;
precedence left INC,DEC;
precedence left MAS, MENOS;
precedence left POR, DIV, MOD;
precedence right POT;
precedence right NOT;
precedence nonassoc PAR_A,PAR_C;


start with INICIO;


INICIO ::= RUN:imp CUERPO:cue
                {:
                    raiz = new Nodo(Cadena.INICIO);
                    raiz.Hijos.add(imp);
                    raiz.Hijos.add(cue);
                    System.out.println("===========================Analisis Correcto==============================");
                :}
;

CUERPO ::= CUERPO:cu CUE:cue
                {:
                    cu.Hijos.add(cue);
                    RESULT = cu;
                :}
            | CUE:cue
                {:
                    RESULT= new Nodo(Cadena.CUERPO);
                    RESULT.Hijos.add(cue);
                :}
;

RUN ::= RU:impo
                {:
                    RESULT = impo;
                :}
        |
                {:
                    RESULT = new Nodo(Cadena.RUN);
                :}
;

RU ::= RU:im run PAR_A L_ARC:ars PAR_C PYCOMA
                {:
                    im.Hijos.add(ars);
                    RESULT = im;
                :}
        | run PAR_A L_ARC:ars PAR_C PYCOMA
                {:
                    RESULT = new Nodo(Cadena.RUN);
                    RESULT.Hijos.add(ars);
                :} 
;

L_ARC ::= L_ARC:ar COMA cad:ca
                {:
                    ar.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                    RESULT = ar;
                :}
        | cad:ca
                {:
                    RESULT = new Nodo(Cadena.L_ARC);
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ca,caleft+1,caright+1));
                :}
;

CUE ::= var:ide L_VAR:lv PYCOMA
                {:
                    RESULT= new Nodo(Cadena.DA_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(lv);
                :}
        | id:ide ASIG LOG:log PYCOMA
                {:
                    RESULT= new Nodo(Cadena.AS_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                :}
        | si:ide PAR_A LOG:log PAR_C LLAV_A CUERPO:cue LLAV_C SIN:sin
                {:
                    RESULT = new Nodo(Cadena.SI);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(cue);
                    RESULT.Hijos.add(sin);
                :}
        | mientras:ide PAR_A LOG:log PAR_C LLAV_A CUERPO:cue LLAV_C
                {:
                    RESULT = new Nodo(Cadena.MIENTRAS);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(cue);
                :}
        | para:ide PAR_A DAS:da PYCOMA LOG:log PYCOMA OP:op PAR_C LLAV_A CUERPO:cue LLAV_C
                {:
                    RESULT = new Nodo(Cadena.PARA);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(da);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(op);
                    RESULT.Hijos.add(cue);
                :}
        | detener:ide PYCOMA
                {:
                    RESULT = new Nodo(Cadena.DETENER);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                :}
        | imprimir:ide PAR_A LOG:log PAR_C PYCOMA
                {:
                    RESULT = new Nodo(Cadena.IMPRIMIR);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                :}
        | OP:op PYCOMA
                {:
                    RESULT = op;
                :}
        | punto:ide PAR_A LOG:e1 COMA LOG:e2 COMA LOG:ca COMA LOG:e3 PAR_C PYCOMA
                {:
                    RESULT = new Nodo(Cadena.PUNTO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));                    
                    RESULT.Hijos.add(e1);                    
                    RESULT.Hijos.add(e2);
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(e3);    
                :}
        | cuadrado:ide PAR_A LOG:e1 COMA LOG:e2 COMA LOG:ca COMA LOG:e3 COMA LOG:e4 PAR_C PYCOMA
                {:
                    RESULT = new Nodo(Cadena.CUADRADO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(e3);
                    RESULT.Hijos.add(e4);
                :}
        | ovalo:ide PAR_A LOG:e1 COMA LOG:e2 COMA LOG:ca COMA LOG:e3 COMA LOG:e4 PAR_C PYCOMA
                {:
                    RESULT = new Nodo(Cadena.OVALO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(e3);
                    RESULT.Hijos.add(e4);
                :}
        | cadena:ide PAR_A LOG:e1 COMA LOG:e2 COMA LOG:ca COMA LOG:ca2 PAR_C PYCOMA
                {:
                    RESULT = new Nodo(Cadena.CADENA);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(ca2);
                :}
        | linea:ide PAR_A LOG:e1 COMA LOG:e2 COMA LOG:e3 COMA LOG:e4 COMA LOG:ca COMA LOG:e5 PAR_C PYCOMA
                {:
                    RESULT = new Nodo(Cadena.LINEA);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(e1);
                    RESULT.Hijos.add(e2);    
                    RESULT.Hijos.add(e3);
                    RESULT.Hijos.add(e4);
                    RESULT.Hijos.add(ca);
                    RESULT.Hijos.add(e5);                    
                :}        
        | error PYCOMA
        | error LLAV_C                
;

L_VAR ::= L_VAR:lv COMA id:ide RES:re
                {:
                    Nodo tmp= new Nodo(Cadena.VAR);
                    tmp.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    tmp.Hijos.add(re);
                    RESULT = lv;
                    RESULT.Hijos.add(tmp);
                :}
        | id:ide RES:re 
                {:
                    RESULT = new Nodo(Cadena.L_VAR);
                    Nodo tmp= new Nodo(Cadena.VAR);
                    tmp.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    tmp.Hijos.add(re);
                    RESULT.Hijos.add(tmp);
                :}
;

RES ::= ASIG LOG:log
                {:
                    RESULT = new Nodo(Cadena.RES);
                    RESULT.Hijos.add(log);
                :}
       |
                {:
                    RESULT = new Nodo(Cadena.RES);
                :}
;


SIN ::= SINOO:sin
                {:
                    RESULT = sin;
                :}
        |   
                {:
                    RESULT = new Nodo(Cadena.SIN);
                :}
;

SINOO ::= SINOO:sin SINO:sino
                {:
                    sin.Hijos.add(sino);
                    RESULT = sin;
                :}
        |SINO:sin
                {:
                    RESULT = new Nodo(Cadena.SIN);
                    RESULT.Hijos.add(sin);
                :}
;

SINO ::= sinosi:ide PAR_A LOG:log PAR_C LLAV_A CUERPO:cue LLAV_C
                {:
                    RESULT = new Nodo(Cadena.SINO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(cue);
                :}
        | si_no:ide LLAV_A CUERPO:cue LLAV_C 
                {:
                    RESULT =  new Nodo(Cadena.SINO);
                    RESULT.Hijos.add(new Nodo(ide,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(cue);    
                :}
;

DAS ::= var:ca id:ide ASIG LOG:log
                {:
                    RESULT= new Nodo(Cadena.DA_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ca,caleft+1,caright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    Nodo tmp= new Nodo(Cadena.RES);
                    tmp.Hijos.add(log);
                    RESULT.Hijos.add(tmp);
                :}
        | id:ide ASIG LOG:log
                {:
                    RESULT= new Nodo(Cadena.AS_VAR);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                :}
;

OP ::= id:ide INC:ide2
                {:
                    RESULT= new Nodo(Cadena.OP);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.inc,(Object)ide2,ide2left+1,ide2right+1));
                :}
        | id:ide DEC:ide2
                {:
                    RESULT= new Nodo(Cadena.OP);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(new Nodo(Cadena.dec,(Object)ide2,ide2left+1,ide2right+1));
                :}
;


LOG ::=   LOG:log OR:ide REL:rel
                {:
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(new Nodo(Cadena.or,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(rel);
                :}
        | LOG:log AND:ide REL:rel
                {:
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(log);
                    RESULT.Hijos.add(new Nodo(Cadena.or,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(rel);
                :}
        | REL:rel
                {:
                    RESULT = new Nodo(Cadena.LOG);
                    RESULT.Hijos.add(rel);
                :}
;


REL ::= ARIT:ar1 OP_REL:re ARIT:ar2
                {:
                    RESULT = new Nodo(Cadena.REL);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(re);
                    RESULT.Hijos.add(ar2);
                :}
    | ARIT:ar
                {:
                    RESULT = new Nodo(Cadena.REL);
                    RESULT.Hijos.add(ar);
                :}
;

OP_REL ::= IGUAL:ide
                {:
                    RESULT  = new Nodo(Cadena.igual,(Object)ide,ideleft+1,ideright+1);
                :}
        | DIFERENTE:ide
                {:
                    RESULT  = new Nodo(Cadena.diferente,(Object)ide,ideleft+1,ideright+1);
                :}
        | MAYOR:ide
                {:
                    RESULT  = new Nodo(Cadena.mayor,(Object)ide,ideleft+1,ideright+1);
                :}
        | MENOR:ide
                {:
                    RESULT  = new Nodo(Cadena.menor,(Object)ide,ideleft+1,ideright+1);
                :}
        | MAYOR_I:ide
                {:
                    RESULT  = new Nodo(Cadena.mayor_i,(Object)ide,ideleft+1,ideright+1);
                :}
        | MENOR_I:ide
                {:
                    RESULT  = new Nodo(Cadena.menor_i,(Object)ide,ideleft+1,ideright+1);
                :}
;

ARIT ::= ARIT:ar1 MAS:ide ARIT:ar2
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.mas,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                :}
        | ARIT:ar1 MENOS:ide ARIT:ar2
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.menos,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                :}
        | ARIT:ar1 POR:ide ARIT:ar2
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.por,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                :}
        | ARIT:ar1 DIV:ide ARIT:ar2
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.div,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                :}
        | ARIT:ar1 POT:ide ARIT:ar2
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.pot,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                :}
        | ARIT:ar1 MOD:ide ARIT:ar2
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(ar1);
                    RESULT.Hijos.add(new Nodo(Cadena.mod,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(ar2);
                :}        
        | NOT:ide LOG:log
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.not,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                :}
        | MENOS:ide LOG:log
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.menos,(Object)ide,ideleft+1,ideright+1));
                    RESULT.Hijos.add(log);
                :}
        | PAR_A LOG:log PAR_C
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(log);
                :}
        | OP:op
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(op);
                :}
        | id:ide
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.id,(Object)ide,ideleft+1,ideright+1));
                :}
        | number:ide
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.number,(Object)ide,ideleft+1,ideright+1));
                :}
        | bool:ide
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.booleano,(Object)ide,ideleft+1,ideright+1));
                :}
        | carac:ide
                 {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.caracter,(Object)ide,ideleft+1,ideright+1));
                :}
        | cad:ide
                 {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.cadena,(Object)ide,ideleft+1,ideright+1));
                :}
        | nulo:ide
                {:
                    RESULT = new Nodo(Cadena.ARIT);
                    RESULT.Hijos.add(new Nodo(Cadena.nulo,(Object)ide,ideleft+1,ideright+1));
                :}
;


